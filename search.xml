<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>代理模式</title>
    <url>/2020/04/17/Head%20First%20Design%20Patterns%E2%80%94%E2%80%94%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<blockquote>
<p>代理模式指的就是使用现一个代理类来代理另一个目标类的行为，比如说我们一般在租房子的时候，不直接和房东进行交涉，而通过房屋中介来进行操作，因为他们手里可能有很多的房源，对于房东来说，就可以直接与房屋中介进行交流。类似的例子数不胜数，又比如好莱坞的明星，都有他们自己的经济人，当然这里指的可不是宝强的经济人，开个玩笑，他们的经济人负责明星的经济活动，这里指的就是代理模式！</p>
<a id="more"></a>
<p>代理模式分为：<strong>静态代理模式，动态代模式（jdk动态代理），cglib动态代理模式</strong>三种！</p>
</blockquote>
<h1 id="一、-静态代理模式："><a href="#一、-静态代理模式：" class="headerlink" title="一、 静态代理模式："></a>一、 静态代理模式：</h1><p> 我们这里就用租房子的例子来说明原理，</p>
<ul>
<li>类图如下 ：</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20200408113559570.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><strong>大概的说明一下：</strong><br>有一个接口Host，里面有Rent租房的方法，然后让HostImpl房东来实现Host方法，这个就是目标类，真正要出租房子的房东，proxy为中介对象，它也实现Host方法，然后在类内部聚合了HostImpl对象，调用HostImpl，从而可以帮房东来出租房子，下面来看具体的代码实现：</p>
<ul>
<li>代码<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Host</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Rent</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HostImpl</span> <span class="keyword">implements</span> <span class="title">Host</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Rent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"房东要租房子"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">proxy</span> <span class="keyword">implements</span> <span class="title">Host</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//聚合HostImpl</span></span><br><span class="line">    HostImpl host;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">proxy</span><span class="params">(HostImpl host)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.host = host;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Rent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"代理开始工作"</span>);</span><br><span class="line">        <span class="comment">//调用HostImpl中的Rent方法</span></span><br><span class="line">        host.Rent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        proxy proxy = <span class="keyword">new</span> proxy(<span class="keyword">new</span> HostImpl());</span><br><span class="line">        proxy.Rent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>运行结果<br><img src="https://img-blog.csdnimg.cn/20200408114157664.png" alt="在这里插入图片描述"><br>静态代理：<br>优点：在不修改目标对象的功能前提下，能通过代理对象目标功能扩展<br>缺点：<br>（1）因为代理对象需要 与目标对象实现一样的接口，所有会有很多代理类<br>（2）一旦接口增加方法，目标对象与代理对象都要维护<h1 id="二、-动态代模式（jdk动态代理）："><a href="#二、-动态代模式（jdk动态代理）：" class="headerlink" title="二、 动态代模式（jdk动态代理）："></a>二、 动态代模式（jdk动态代理）：</h1></li>
<li><em>基本介绍：*</em><br>1）代理对象不需要实现接口，但是目标对象要实现接口，否则不能用动态代理<br>2）代理对象的生成是利用JDK的API，动态的在内存中构建代理对象<br>3）动态代理也叫：JDK代理、接口代理</li>
<li>类图如下：<br><img src="https://img-blog.csdnimg.cn/20200408161327757.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>getProxyInstacne():</strong><br>1.根据传入的对象（HostImpl）,目标对象<br>2.利用反射机制，返回一个代理对象<br>3.然后通过代理对象，调用目标对象方法</li>
<li>代码实现<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Host</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Rent</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HostImpl</span> <span class="keyword">implements</span> <span class="title">Host</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Rent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"房东要租房子"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInvocationHadler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyInvocationHadler</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行目标方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"JDK代理"</span>);</span><br><span class="line">        <span class="comment">//利用反射机制调用目标对象的方法</span></span><br><span class="line">        Object returnVal = method.invoke(target, args);</span><br><span class="line">        System.out.println(<span class="string">"JDK代理提交"</span>);</span><br><span class="line">        <span class="keyword">return</span> returnVal;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProxyFactory</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//给目标对象，生成一个代理对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getProxyInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * public static Object newProxyInstance(ClassLoader loader,</span></span><br><span class="line"><span class="comment">         *                                 Class&lt;?&gt;[] interfaces,</span></span><br><span class="line"><span class="comment">         *                                 InvocationHandler h)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//1.ClassLoader loader：指定当前目标对象使用的类加载器</span></span><br><span class="line">        <span class="comment">//2.Class&lt;?&gt;[] interfaces:目标对象实现的接口类型，使用泛型确认类型</span></span><br><span class="line">        <span class="comment">//3.InvocationHandler h)：事件处理，执行目标对象的方法，会触发事件处理器方法</span></span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(target.getClass().getClassLoader(),</span><br><span class="line">                target.getClass().getInterfaces(),</span><br><span class="line">                <span class="keyword">new</span> MyInvocationHadler(target));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>测试结果<br><img src="https://img-blog.csdnimg.cn/20200408161639895.png" alt="在这里插入图片描述"></li>
<li>通过Debug可以观察到<br><img src="https://img-blog.csdnimg.cn/20200408175345938.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
<li>类图所示<br><img src="https://img-blog.csdnimg.cn/20200408161943446.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h1 id="三、-Cglib动态代理模式："><a href="#三、-Cglib动态代理模式：" class="headerlink" title="三、 Cglib动态代理模式："></a>三、 Cglib动态代理模式：</h1><blockquote>
<p>基本介绍：</p>
<p>1）静态代理和JDK动态代理都要求目标对象是实现一个接口，但有时候目标对象只是一个单独的对象，并没有实现任何的接口，这个时候可以使目标对象子类来实现代理，这就是Cglib代理。<br>2）Cglib代理也叫子类代理，它是在内存中构建一个子类对象从而实现目标对象功能扩展，有时候也把Cglib代理归属到动态代理中。<br>3）Cglib代理是一个强大的高性能的代码生成包，这可以在运行期间扩展java类与实现java接口，它广泛的被许多AOP的框架使用，例如：Spring AOP中实现方法拦截<br>4）在AOP编程中如何选择代理模式：<br>4.1）<strong>目标对象需要实现接口</strong>，就用<strong>JDK代理</strong><br>4.2）<strong>目标对象不需要实现接口</strong>，就用<strong>Cglib代理</strong><br>5）Cglib包的底层是通过使用字节码处理框架ASM来转换字节码并生成新的类</p>
</blockquote>
<ul>
<li>Cglib使用的jar包：<blockquote>
<p>cglib-2.2.jar<br> asm.jar<br> commons.jar<br> asm-tree.jar</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<p>没有jar包的小伙伴可以下载食用：<br>链接：<a href="https://pan.baidu.com/s/16XEWkAGapxnmT4Li4ocKDA" target="_blank" rel="noopener">https://pan.baidu.com/s/16XEWkAGapxnmT4Li4ocKDA</a><br>提取码：sa4k</p>
<ul>
<li>类图如下<br><img src="https://img-blog.csdnimg.cn/20200408172519153.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
<li>代码实现<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HostImpl</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Rent</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"房东要租房子,cglib方式"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyFactory</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="comment">//给一个目标对象</span></span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器，用于初始化被代理的对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProxyFactory</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回一个代理对象，是target对象的代理对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getProxyInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//1.创建一个工具类</span></span><br><span class="line">        Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line">        <span class="comment">//2.设置父类</span></span><br><span class="line">        enhancer.setSuperclass(target.getClass());</span><br><span class="line">        <span class="comment">//3.设置回调函数</span></span><br><span class="line">        enhancer.setCallback(<span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">//4.创建子类对象，即代理对象</span></span><br><span class="line">        <span class="keyword">return</span> enhancer.create();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重写intercept方法，会调用目标对象的方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object o, Method method, Object[] args, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"cglib代理模式*******开始"</span>);</span><br><span class="line">        Object returnVale = method.invoke(target, args);</span><br><span class="line">        System.out.println(<span class="string">"cglib代理模式*******提交"</span>);</span><br><span class="line">        <span class="keyword">return</span> returnVale;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//目标对象</span></span><br><span class="line">        HostImpl target = <span class="keyword">new</span> HostImpl();</span><br><span class="line">        <span class="comment">//获得到代理对象，并且将目标对象传递给代理对象</span></span><br><span class="line">        HostImpl proxyFactory = (HostImpl)<span class="keyword">new</span> ProxyFactory(target).getProxyInstance();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行代理对象的方法，触发intercept方法，从而实现对目标对象调用</span></span><br><span class="line">        proxyFactory.Rent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>运行结果<br><img src="https://img-blog.csdnimg.cn/20200408174116812.png" alt="在这里插入图片描述"></li>
<li>通过Debug可以观察到<br><img src="https://img-blog.csdnimg.cn/20200408175057283.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
<li>类图形式<br><img src="https://img-blog.csdnimg.cn/20200408174214555.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>总结：</strong><br>cglib生成动态代理时，目标对象target和ProxyFactory 都不需要实现接口！</li>
</ul>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>-java -设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>装饰者模式</title>
    <url>/2020/04/17/Head%20First%20Design%20Patterns%E2%80%94%E2%80%94%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>基本介绍：<br>装饰者模式：动态的将新功能附加到对象上，在对象功能扩展方面，它比继承更具有弹性，装饰者模式也体现了开闭原则(ocp)，装饰者模式也可以理解为包装模式。</p>
<a id="more"></a>
<h3 id="例如-我们要寄一个手机-发快递我们的操作应该如下"><a href="#例如-我们要寄一个手机-发快递我们的操作应该如下" class="headerlink" title="例如: 我们要寄一个手机,发快递我们的操作应该如下"></a>例如: 我们要寄一个手机,发快递我们的操作应该如下</h3><ol>
<li>把手机用防震膜包裹起来，这是第一层的装饰<br>  <img src="https://img-blog.csdnimg.cn/20200408213255280.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
<li>接下来我们得用快递盒进行包装<br>  <img src="https://img-blog.csdnimg.cn/20200408213428144.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
<li>最后再用塑料袋子封装好<br>  <img src="https://img-blog.csdnimg.cn/20200408213625174.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h4 id="这样一个手机就完成了包装，装饰者模式就是这样的原理，下面来看具体的说明："><a href="#这样一个手机就完成了包装，装饰者模式就是这样的原理，下面来看具体的说明：" class="headerlink" title="这样一个手机就完成了包装，装饰者模式就是这样的原理，下面来看具体的说明："></a>这样一个手机就完成了包装，装饰者模式就是这样的原理，下面来看具体的说明：</h4></li>
</ol>
<ul>
<li>类图表示<br><img src="https://img-blog.csdnimg.cn/20200408222521390.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
</ul>
<p><strong>(1)Component</strong></p>
<p>定义一个抽象类，用于接收动态添加的需求。</p>
<p><strong>(2)ConcreteComponent</strong></p>
<p>ConcreteComponent是我们要动态加上新行为的对象。</p>
<p><strong>(3)Decorator</strong></p>
<p>每一个装饰者都持有一个构件(Component)对象的实例，</p>
<p>也就是说，装饰者有一个实例变量以保存某个Component的引用，</p>
<p><strong>(4)ConcreteDecorator</strong></p>
<p>真正的装饰者，负责给对象添加新的方法和行为。</p>
<h2 id="第一个例子："><a href="#第一个例子：" class="headerlink" title="第一个例子："></a>第一个例子：</h2><blockquote>
<p>被装饰者抽象类：Beverage<br>被装饰者：Espresso，HouseBlend<br>装饰者抽象类：CondimentDecorator<br>装饰者：Mocha</p>
</blockquote>
<ul>
<li>具体实现代码<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 被装饰者的抽象类：饮料</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Beverage</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    String description = <span class="string">"Unknown Beverage"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//成本</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//得到描述信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> description;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 被装饰者：浓咖啡</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Espresso</span> <span class="keyword">extends</span> <span class="title">Beverage</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Espresso</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        description = <span class="string">"Espresso"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 被装饰者：混合咖啡</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HouseBlend</span> <span class="keyword">extends</span> <span class="title">Beverage</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HouseBlend</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        description = <span class="string">"House Blend"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 装饰者的抽象类：调料</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">CondimentDecorator</span> <span class="keyword">extends</span> <span class="title">Beverage</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">getDescription</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 装饰者：摩卡</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mocha</span> <span class="keyword">extends</span> <span class="title">CondimentDecorator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//聚合被装饰者，可以传入实现Beverage接口的所有对象</span></span><br><span class="line">    Beverage beverage;</span><br><span class="line">	<span class="comment">//构造器，初始化beverage</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Mocha</span><span class="params">(Beverage beverage)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.beverage = beverage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> beverage.getDescription()+<span class="string">",Mocha"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    	<span class="comment">//调用被装饰者的成本，加上装饰者的成本</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span> + beverage.cost();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CoffeeTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Beverage beverage = <span class="keyword">new</span> Espresso();</span><br><span class="line">        <span class="comment">//一杯浓咖啡为2元</span></span><br><span class="line">        System.out.println(beverage.getDescription()+<span class="string">","</span>+beverage.cost());</span><br><span class="line"></span><br><span class="line">        Beverage beverage1 = <span class="keyword">new</span> HouseBlend();</span><br><span class="line">        <span class="comment">//一杯混合咖啡(1)加摩卡(3)为4元</span></span><br><span class="line">        <span class="comment">// 在单个混合咖啡中包装了摩卡</span></span><br><span class="line">        beverage1 = <span class="keyword">new</span> Mocha(beverage1);</span><br><span class="line">        System.out.println(beverage1.getDescription()+<span class="string">","</span>+beverage1.cost());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//一杯混合咖啡(1)加摩卡(3)加摩卡(3)为7元</span></span><br><span class="line">        <span class="comment">//可以在包装好的基础上再次进行包装</span></span><br><span class="line">        beverage1 = <span class="keyword">new</span> Mocha(beverage1);</span><br><span class="line">        System.out.println(beverage1.getDescription()+<span class="string">","</span>+beverage1.cost());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>运行结果<br><img src="https://img-blog.csdnimg.cn/2020040823112636.png" alt="在这里插入图片描述"><h2 id="我们发现，写的包装起作用了，可以实现包装功用了！"><a href="#我们发现，写的包装起作用了，可以实现包装功用了！" class="headerlink" title="我们发现，写的包装起作用了，可以实现包装功用了！"></a>我们发现，写的包装起作用了，可以实现包装功用了！</h2></li>
<li>类图形式<br><img src="https://img-blog.csdnimg.cn/2020040823122642.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h2 id="第二个例子："><a href="#第二个例子：" class="headerlink" title="第二个例子："></a>第二个例子：</h2></li>
<li>结构图<br><img src="https://img-blog.csdnimg.cn/20200409092907995.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
<li>代码实现<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 被装饰者抽象类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Drink</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String des;<span class="comment">//描述</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> price = <span class="number">0.0f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> des;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDes</span><span class="params">(String des)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.des = des;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(<span class="keyword">float</span> price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//计算费用的抽象 方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">abstract</span> <span class="keyword">float</span> <span class="title">cost</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 缓冲层</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Coffee</span> <span class="keyword">extends</span> <span class="title">Drink</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getPrice();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 被装饰者：意大利咖啡</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Espresso</span> <span class="keyword">extends</span> <span class="title">Coffee</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Espresso</span><span class="params">()</span></span>&#123;</span><br><span class="line">        setDes(<span class="string">"意大利咖啡"</span>);</span><br><span class="line">        setPrice(<span class="number">6.0f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 装饰者抽象类：</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Decorator</span> <span class="keyword">extends</span> <span class="title">Drink</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Drink obj;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Decorator</span><span class="params">(Drink obj)</span> </span>&#123;<span class="comment">//组合</span></span><br><span class="line">        <span class="keyword">this</span>.obj = obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//getPrice自己的价格</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getPrice() + obj.cost();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDes</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//obj.getDes()被装饰者的信息</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.des+<span class="string">" "</span>+<span class="keyword">super</span>.getPrice()+<span class="string">"&amp;&amp;"</span>+obj.getDes();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 被装饰者：LongBlack</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LongBlack</span> <span class="keyword">extends</span> <span class="title">Coffee</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LongBlack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        setDes(<span class="string">"LongBlack"</span>);</span><br><span class="line">        setPrice(<span class="number">5.0f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 被装饰者：ShortBlack</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShortBlack</span> <span class="keyword">extends</span> <span class="title">Coffee</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ShortBlack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        setDes(<span class="string">"ShortBlack"</span>);</span><br><span class="line">        setPrice(<span class="number">4.0f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 装饰者：</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Milk</span> <span class="keyword">extends</span> <span class="title">Decorator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Milk</span><span class="params">(Drink obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(obj);</span><br><span class="line">        setDes(<span class="string">"牛奶"</span>);</span><br><span class="line">        setPrice(<span class="number">2.0f</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 装饰者：</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Soy</span> <span class="keyword">extends</span> <span class="title">Decorator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Soy</span><span class="params">(Drink obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(obj);</span><br><span class="line">        setDes(<span class="string">"豆浆"</span>);</span><br><span class="line">        setPrice(<span class="number">1.5f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 装饰者：</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Chocolate</span> <span class="keyword">extends</span> <span class="title">Decorator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Chocolate</span><span class="params">(Drink obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(obj);</span><br><span class="line">        setDes(<span class="string">"巧克力"</span>);</span><br><span class="line">        setPrice(<span class="number">3.0f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CoffBar</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.点一份LongBlank</span></span><br><span class="line">        Drink order = <span class="keyword">new</span> LongBlack();</span><br><span class="line">        System.out.println(<span class="string">"费用1="</span>+order.cost());</span><br><span class="line">        System.out.println(<span class="string">"描述="</span>+order.getDes());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//2.加一份牛奶</span></span><br><span class="line">        order = <span class="keyword">new</span> Milk(order);</span><br><span class="line">        System.out.println(<span class="string">"加入一份牛奶后的费用1="</span>+order.cost());</span><br><span class="line">        System.out.println(<span class="string">"描述="</span>+order.getDes());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.加入一份巧克力</span></span><br><span class="line">        order = <span class="keyword">new</span> Chocolate(order);</span><br><span class="line">        System.out.println(<span class="string">"加入一份牛奶,一份巧克力后的费用1="</span>+order.cost());</span><br><span class="line">        System.out.println(<span class="string">"描述="</span>+order.getDes());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>运行结果<br><img src="https://img-blog.csdnimg.cn/20200409093357579.png" alt="在这里插入图片描述"></li>
<li>类图形式<br><img src="https://img-blog.csdnimg.cn/20200409093601560.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h2 id="java-I-O"><a href="#java-I-O" class="headerlink" title="java I/O"></a>java I/O</h2><img src="https://img-blog.csdnimg.cn/20200409101434350.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
<li>从JDK源码中我们可以发现<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//装饰者抽象类类继承了被装饰者：InputStream </span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterInputStream</span> <span class="keyword">extends</span> <span class="title">InputStream</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The input stream to be filtered.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">     <span class="comment">//聚合了抽象组件componment</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">volatile</span> InputStream in;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates a &lt;code&gt;FilterInputStream&lt;/code&gt;</span></span><br><span class="line"><span class="comment">     * by assigning the  argument &lt;code&gt;in&lt;/code&gt;</span></span><br><span class="line"><span class="comment">     * to the field &lt;code&gt;this.in&lt;/code&gt; so as</span></span><br><span class="line"><span class="comment">     * to remember it for later use.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>   in   the underlying input stream, or &lt;code&gt;null&lt;/code&gt; if</span></span><br><span class="line"><span class="comment">     *          this instance is to be created without an underlying stream.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//利用构造方法初始化InputStream </span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">FilterInputStream</span><span class="params">(InputStream in)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.in = in;</span><br><span class="line">    &#125;</span><br><span class="line">----------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment">//被装饰者继承抽象类InputStream</span></span><br><span class="line"><span class="keyword">public</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileInputStream</span> <span class="keyword">extends</span> <span class="title">InputStream</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    .......</span><br><span class="line">&#125;</span><br><span class="line">----------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment">//实际的装饰者继承装饰者抽象类</span></span><br><span class="line"><span class="keyword">public</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataInputStream</span> <span class="keyword">extends</span> <span class="title">FilterInputStream</span> <span class="keyword">implements</span> <span class="title">DataInput</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h2 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h2></li>
</ul>
<p>1.装饰者模式意味着一群装饰者类，这些类用来包装具体组件。<br>2.装饰者类反映 出被装饰的组件类型（事实上，他们具有相同的类型，都经过接口或继承实现）。<br>3.装饰者可以在被装饰者的行为前面/或后面加上自己的行为，甚至将被装饰者的行为整个取代掉，而达到特定的目的。<br>4.你可以用无数个装饰者包装一个组件。<br>5.装饰者一般对组件的客户是透明的，除非客户程序依赖于组件的具体类型。</p>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>-java -设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>单例模式</title>
    <url>/2020/06/21/Head%20First%20Design%20Patterns%E2%80%94%E2%80%94%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>基本介绍：<br>单例模式：也叫单件模式，可以用来创建独一无二的，只能有一个实例的对象，并且该类只提供一个取得其对象实例的方法(static)！它是所有设计模式中最简单的，它的类图只有一个类：</p>
<a id="more"></a>



<h2 id="1）饿汉式（静态常量）"><a href="#1）饿汉式（静态常量）" class="headerlink" title="1）饿汉式（静态常量）"></a>1）饿汉式（静态常量）</h2><blockquote>
<p>创建的步骤：<br>1.构造器私有化（防止 new来获得实例）<br>2.类的内部创建对象<br>3.向外界暴露一个静态的公共方法。getInstance<br>4.代码实现</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//饿汉式（静态变量)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.构造器私有化</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.本类内部创建对象实例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.提供一个公有的静态方法，返回实例对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Singleton instance = Singleton.getInstance();</span><br><span class="line">        Singleton instance1 = Singleton.getInstance();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"instance:"</span>+instance.hashCode()+<span class="string">"\n"</span>+<span class="string">"instance1:"</span>+instance1.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>测试结果<br><img src="https://img-blog.csdnimg.cn/20200409113529196.png" alt="在这里插入图片描述"><br>两个对象实例的hashCode值相等，说明 new的两个对象是同一个，这样就避免了new实例多个对象！</p>
</li>
<li><p>优缺点：</p>
<blockquote>
<p>优点：这种写法比较简单，就是在类装载的时候就完成 了实例化，避免了线程同步问题。<br>缺点：<br>1.在类装载时就完成 了实例化，油源有达到Lazy Loading的效果，如果从始至终从未使用过这个实例，则会造成内存的浪费。<br>2.这种方式基于classLoader机制避免了多线程的同步问题，不过，Instance在类装载时就实例化，在单例模式中大多数都是调用getInstance方法，但是导致类装载的原因有很多种，因此不能确定有其他的方式导致类装载，这时候初始化instance就没有达到Lazy Loading的效果。</p>
</blockquote>
</li>
<li><p>结论：</p>
<blockquote>
<p>这种单例模式可用，可能会<strong>造成内存浪费</strong>！</p>
</blockquote>
</li>
</ul>
<hr>
<h2 id="2）饿汉式（静态代码块）"><a href="#2）饿汉式（静态代码块）" class="headerlink" title="2）饿汉式（静态代码块）"></a>2）饿汉式（静态代码块）</h2><blockquote>
<p>这和方式和静态常量方法类似 ，只是在内部将创建实例对象的操作放到了静态代码块中进行了</p>
</blockquote>
<ul>
<li>代码实现<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//饿汉式（静态代码块）</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.构造器私有化</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.本类内部创建对象实例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;<span class="comment">//在静态代码块中创建单例对象</span></span><br><span class="line">        instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.提供一个公有的静态方法，返回实例对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Singleton instance = Singleton.getInstance();</span><br><span class="line">        Singleton instance1 = Singleton.getInstance();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"instance:"</span>+instance.hashCode()+<span class="string">"\n"</span>+<span class="string">"instance1:"</span>+instance1.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>运行结果<br><img src="https://img-blog.csdnimg.cn/20200409113529196.png" alt="在这里插入图片描述"></li>
<li>结论：<blockquote>
<p>这种单例模式也是可用的，但是可能会造成内存浪费</p>
</blockquote>
</li>
</ul>
<hr>
<h2 id="3）懒汉式（线程不安全）"><a href="#3）懒汉式（线程不安全）" class="headerlink" title="3）懒汉式（线程不安全）"></a>3）懒汉式（线程不安全）</h2><ul>
<li><p>代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonTest03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Singleton instance = Singleton.getInstance();</span><br><span class="line">        Singleton instance1 = Singleton.getInstance();</span><br><span class="line">        System.out.println(instance == instance1);</span><br><span class="line">        System.out.println(<span class="string">"instance:"</span>+instance.hashCode()+<span class="string">"\n"</span>+<span class="string">"instance1:"</span>+instance1.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提供一个静态的公有方法，使用到该方法时，才去创建instance</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>运行结果<br><img src="https://img-blog.csdnimg.cn/20200409144346277.png" alt="在这里插入图片描述"></p>
</li>
<li><p>总结：</p>
<blockquote>
<p>提供一个静态的公有方法，使用到该方法时，才去创建instance<br>1.起到了Lazy Loading的效果，但是只能在单线程下使用<br>2.如果在多线程下，一个线程进入了if(singleton == null)判断语句时，还未来得及往下执行，另一个线程也通过了这个判断语句，这时便会产生多个实例。所以在多线程环境下不可使用这种方式</p>
</blockquote>
</li>
<li><p>结论：</p>
</li>
</ul>
<p><strong>在实际开发中，不要使用这种方式。</strong></p>
<hr>
<h2 id="4）懒汉式（线程安全，同步方法）"><a href="#4）懒汉式（线程安全，同步方法）" class="headerlink" title="4）懒汉式（线程安全，同步方法）"></a>4）懒汉式（线程安全，同步方法）</h2><ul>
<li>代码实现<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonTest04</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"懒汉式（线程安全，同步方法）"</span>);</span><br><span class="line">        Singleton instance = Singleton.getInstance();</span><br><span class="line">        Singleton instance1 = Singleton.getInstance();</span><br><span class="line">        System.out.println(instance == instance1);</span><br><span class="line">        System.out.println(<span class="string">"instance:"</span>+instance.hashCode()+<span class="string">"\n"</span>+<span class="string">"instance1:"</span>+instance1.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//懒汉式（线程安全，同步方法）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提供一个静态的公有方法,加入同步处理的代码，解决线程安全问题</span></span><br><span class="line">    <span class="comment">//synchronized</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>运行结果<br><img src="https://img-blog.csdnimg.cn/20200409145819688.png" alt="在这里插入图片描述"></li>
<li>总结：</li>
</ul>
<ol>
<li>解决了线程不安全问题</li>
<li>效率太低了，每个线程都在想获得类的实例时候，执行getInstance()方法都要进行执行同步。而其实这个方法只执行一次实例化代码就够了，后面的想获得该实例，直接return 就行了，方法进行同步的效率太低了。</li>
</ol>
<ul>
<li>总结<br><strong>在实际开发中，不推荐使用这种方式</strong></li>
</ul>
<hr>
<h2 id="5）懒汉式（线程安全，同步代码块）"><a href="#5）懒汉式（线程安全，同步代码块）" class="headerlink" title="5）懒汉式（线程安全，同步代码块）"></a>5）懒汉式（线程安全，同步代码块）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonTest05</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"懒汉式 同步代码块"</span>);</span><br><span class="line">        Singleton instance = Singleton.getInstance();</span><br><span class="line">        Singleton instance1 = Singleton.getInstance();</span><br><span class="line">        System.out.println(instance == instance1);</span><br><span class="line">        System.out.println(<span class="string">"instance:"</span>+instance.hashCode()+<span class="string">"\n"</span>+<span class="string">"instance1:"</span>+instance1.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//懒汉式（线程安全，同步方法）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  Singleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提供一个静态的公有方法,加入同步处理的代码，解决线程安全问题</span></span><br><span class="line">    <span class="comment">//synchronized</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">                instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>运行结果<br><img src="https://img-blog.csdnimg.cn/20200409151422498.png" alt="在这里插入图片描述"></li>
<li>总结：</li>
</ul>
<ol>
<li>这种方式，本意是想对第四种方式的改进，因为前面同步方法效率太低了，改为同步 产生实例化的代码块。</li>
<li><strong>但是这种同步并不能起到线程同步的作用。</strong>，假如一个线程进入到if(Singleton == null)判断语句块，还未来得及往下执行，另一个线程也通过了这个判断语句，这时便会产生多个实例。</li>
</ol>
<ul>
<li>结论：<br><strong>在实际开发中，不能使用这种方式。</strong></li>
</ul>
<hr>
<h2 id="6）双重检查（推荐使用）"><a href="#6）双重检查（推荐使用）" class="headerlink" title="6）双重检查（推荐使用）"></a>6）双重检查（推荐使用）</h2><ul>
<li>代码实现<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonTest06</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"双重检查"</span>);</span><br><span class="line">        Singleton instance = Singleton.getInstance();</span><br><span class="line">        Singleton instance1 = Singleton.getInstance();</span><br><span class="line">        System.out.println(instance == instance1);</span><br><span class="line">        System.out.println(<span class="string">"instance:"</span>+instance.hashCode()+<span class="string">"\n"</span>+<span class="string">"instance1:"</span>+instance1.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//懒汉式（线程安全，同步方法）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提供一个静态的公有方法,加入双重检查代码，解决线程安全问题，同时解决懒加载问题</span></span><br><span class="line">    <span class="comment">//同时保证了效率</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>运行结果<br><img src="https://img-blog.csdnimg.cn/20200409153524346.png" alt="在这里插入图片描述"></li>
<li>总结 </li>
</ul>
<ol>
<li>Double-Check概念是多线程开发中学使用到的，我们进行了两次if (instance == null)检查，这样就可以保证线程安全了</li>
<li>这样，实例化代码只执行一次，后面再次访问时，判断if (instance == null)，直接 return实例化对象，也就避免了反复执行方法同步 。</li>
<li>线程安全，延迟加载，效率较高</li>
</ol>
<ul>
<li>结论：<br><strong>在开发中，推荐使用这种单例设计模式!</strong></li>
</ul>
<hr>
<h2 id="7）静态内部类（推荐使用）"><a href="#7）静态内部类（推荐使用）" class="headerlink" title="7）静态内部类（推荐使用）"></a>7）静态内部类（推荐使用）</h2><blockquote>
<p>基本介绍：</p>
</blockquote>
<ol>
<li>静态内部类不会在类装载时，直接执行，保证了懒加载</li>
<li>在调用类中的方法时，再装载静态内部类，是可行的，JVM中进行类装载时是线程安全的</li>
</ol>
<ul>
<li>代码实现<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonTest7</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"静态内部类：单例模式"</span>);</span><br><span class="line">        Singleton instance = Singleton.getInstance();</span><br><span class="line">        Singleton instance1 = Singleton.getInstance();</span><br><span class="line">        System.out.println(instance == instance1);</span><br><span class="line">        System.out.println(<span class="string">"instance:"</span>+instance.hashCode()+<span class="string">"\n"</span>+<span class="string">"instance1:"</span>+instance1.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//静态内部类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//静态内部类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonInstance</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提供一个静态的公有方法,直接返回SingletonInstance.INSTANCE</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonInstance.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>运行结果<br><img src="https://img-blog.csdnimg.cn/2020040915524847.png" alt="在这里插入图片描述"></li>
<li>总结 <blockquote>
<p>1.这种方式采用了类装载的机制来保证初始化实例时只有一个线程。<br>2.静态内部类方式在Singleton类被装载时并不会立即实例化，而是在需要实例化时，调用getInstance方法，才会被装载SingletonInstance类，从而完成Singleton的实例化。<br>3.类的静态属性只会在第一次加载类的时候初始化，所以在这里，JVM帮助我们保证了线程的安全性，在类进行初始化时，别的线程是无法进入的。<br>4.优点：避免了线程不安全，利用静态内部类特点实现延迟加载，效率高。</p>
</blockquote>
</li>
<li>结论<br><strong>推荐使用！</strong></li>
</ul>
<hr>
<h2 id="8）枚举方式"><a href="#8）枚举方式" class="headerlink" title="8）枚举方式"></a>8）枚举方式</h2><ul>
<li>代码实现<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonTest08</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Singleton instance = Singleton.INSTANCE;</span><br><span class="line">        Singleton instance1 = Singleton.INSTANCE;</span><br><span class="line">        System.out.println(instance == instance1);</span><br><span class="line">        System.out.println(instance.hashCode());</span><br><span class="line">        System.out.println(instance1.hashCode());</span><br><span class="line"></span><br><span class="line">        instance.sayHello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用枚举可以实现单例，推荐作用</span></span><br><span class="line"><span class="keyword">enum</span> Singleton&#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hello enum"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>运行结果<br><img src="https://img-blog.csdnimg.cn/2020040916162786.png" alt="在这里插入图片描述"></li>
<li>总结：<blockquote>
<p>1.借助JDK1.5中添加的枚举来实现单例模式，不仅可以避免多线程同步 问题，而且还能防止反序列化重新创建新的对象</p>
</blockquote>
</li>
<li>结论：<br><strong>强力推荐使用！！！</strong></li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20200409162749367.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p><strong>整理不易，如果大家觉得好的话，可以加关注，后续会整理更多的知识点！</strong></p>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>java设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>JSP如何获取数据库的图片</title>
    <url>/2020/01/02/JSP%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%9B%BE%E7%89%87/</url>
    <content><![CDATA[<blockquote>
<p>在我们学习jsp的过程中，有时候有的业务处理会使用到数据库中的图片，我当时也遇到了这种情况，当时也是想走捷径就在csdn上百，发现并没有任何卵用，大家写的都千篇一律，于是就想自己搞懂这个问题。</p>
</blockquote>
<a id="more"></a>

<ul>
<li>数据库中存放的无非就：图片的相对路径和图片的名称，当然这两种意思本质上也是相同的。下面的就是一般数据库表的格式就是这样的。我用的数据库客户端是<strong>SQLyog</strong>。<br>  <img src="https://img-blog.csdnimg.cn/20200109204344536.png" alt="nbateam"><pre><code>项目的结构图如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20200109205450268.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70)
NBA文件夹下放的是数据库中存放的图片，将源图片Ctrl + V搞到里面就OK了。
通过路径的方式，取出你要查询的队名，初始化要查询的字段。搞到集合里占位输出就好了，下面上代码：</code></pre></li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"lishi"</span>&gt;</span><br><span class="line">          	    	&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"tab"</span>&gt; </span><br><span class="line">          	    	&lt;table  width=<span class="string">"600"</span> align=<span class="string">"center"</span> height=<span class="string">"150"</span> &gt;</span><br><span class="line">          	    	&lt;%</span><br><span class="line">          	    	ArrayList&lt;NTm&gt; list = (ArrayList&lt;NTm&gt;)session.getAttribute(<span class="string">"ssss"</span>);</span><br><span class="line">          	    	<span class="keyword">if</span>(list!=<span class="keyword">null</span>&amp;&amp;list.size() != <span class="number">0</span>)&#123; %&gt;</span><br><span class="line">          	    	&lt;tr align=<span class="string">"center"</span> height=<span class="string">"5"</span>&gt;</span><br><span class="line">          	    			&lt;td class="z1"&gt;&lt;/td&gt;</span><br><span class="line">          	    		&lt;/tr&gt;</span><br><span class="line">          	    		&lt;tr height=<span class="string">"6"</span>&gt; </span><br><span class="line">          	    			&lt;td  align="left"&gt;&lt;/td&gt;</span><br><span class="line">          	    		&lt;/tr&gt;</span><br><span class="line">          	    	&lt;% 	</span><br><span class="line">          	    	<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; list.size();j++)&#123; %&gt;</span><br><span class="line">          	    		&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"img1"</span> width=<span class="string">"200"</span> height=<span class="string">"200"</span>&gt;</span><br><span class="line">          	    			&lt;img src=<span class="string">"img/NBA/&lt;%=list.get(j).getImgsd()%&gt;"</span> height=<span class="string">"200"</span> width=<span class="string">"200"</span>&gt;</span><br><span class="line">          	    		&lt;/div&gt;</span><br><span class="line">          	    		&lt;tr align=<span class="string">"center"</span> height=<span class="string">"60"</span>&gt;</span><br><span class="line">          	    			&lt;td class="z1"&gt;&lt;%=list.get(j).getNtem() %&gt;&lt;/td&gt;</span><br><span class="line">          	    			</span><br><span class="line">          	    		&lt;/tr&gt;</span><br><span class="line">          	    		&lt;tr height=<span class="string">"200"</span>&gt; </span><br><span class="line">          	    			&lt;td  align="left"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;%=list.get(j).getNhostr() %&gt;&lt;/td&gt;</span><br><span class="line">          	    		&lt;/tr&gt;</span><br><span class="line">          	    		&lt;%&#125; </span><br><span class="line">          	    	&#125;</span><br><span class="line">          	    	</span><br><span class="line">          	    	%&gt;</span><br><span class="line">          	    	&lt;/table&gt;</span><br><span class="line">          	    	&lt;/div&gt;</span><br><span class="line">          	    &lt;/div&gt;</span><br><span class="line">          &lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>上面的代码是前端显示的界面，使用的是表单提交的方式，将业务需求交给对应的Servlet层进行处理。<br><strong>Servlet层：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ArrayList&lt;NTm&gt; <span class="title">selectByTeam</span><span class="params">(String Ntem)</span></span>&#123;</span><br><span class="line">		ArrayList&lt;NTm&gt; slist = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">try</span>&#123;</span><br><span class="line">			slist = nd.selectByTeam(Ntem);</span><br><span class="line">		&#125; <span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> (ArrayList&lt;NTm&gt;)slist;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Dao层：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ArrayList&lt;NTm&gt; <span class="title">selectByTeam</span><span class="params">(String Ntem)</span></span>&#123;</span><br><span class="line">		ArrayList&lt;NTm&gt; list = <span class="keyword">new</span> ArrayList&lt;NTm&gt;();</span><br><span class="line">		String sql = <span class="string">"select * from nbateam where Ntem like '%"</span>+Ntem+<span class="string">"%'"</span>;</span><br><span class="line">		NTm ntm = <span class="keyword">new</span> NTm();</span><br><span class="line">		<span class="keyword">try</span>&#123;</span><br><span class="line">			DBUtil.getConnection();</span><br><span class="line">			rs = DBUtil.executeQuery(sql);</span><br><span class="line">			<span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">				ntm.setNno(rs.getInt(<span class="string">"Nno"</span>));</span><br><span class="line">				ntm.setNtem(rs.getString(<span class="string">"Ntem"</span>));</span><br><span class="line">				ntm.setNhostr(rs.getString(<span class="string">"Nhostr"</span>));</span><br><span class="line">				ntm.setImgsd(rs.getString(<span class="string">"Imgsd"</span>));</span><br><span class="line">				list.add(ntm);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; <span class="keyword">finally</span>&#123;</span><br><span class="line">			DBUtil.close();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> list;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Bean层：</strong><br>Bean层大家自己封装就OK了，这个不再进行说明。</p>
<p>这个问题的实质就是使用：<strong>img 标签将查找的队名与数据库中的一致时，就输入相对路径的图片。</strong></p>
<p>如有问题，还望各位大佬多多指教！</p>
]]></content>
      <categories>
        <category>Javaweb</category>
      </categories>
      <tags>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA整合SSM的小Demo</title>
    <url>/2020/05/20/IDEA%E6%95%B4%E5%90%88SSM%E7%9A%84%E5%B0%8FDemo/</url>
    <content><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200622102559659.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<a id="more"></a>

<h1 id="SSM整合的小Demo："><a href="#SSM整合的小Demo：" class="headerlink" title="SSM整合的小Demo："></a>SSM整合的小Demo：</h1><h2 id="功能点："><a href="#功能点：" class="headerlink" title="功能点："></a>功能点：</h2><figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>分页</span><br><span class="line"><span class="number">2.</span>数据校验</span><br><span class="line"><span class="number">2.1</span>前端<span class="comment">(jquery)</span>和后端校验<span class="comment">(JSR303)</span></span><br><span class="line"><span class="number">3.</span>ajax（新增，编辑，删除，多个删除）</span><br><span class="line"><span class="number">4.</span>Rest风格的URL：使用HTTP协议请求方式的动词，来表示对资源的操作（GET<span class="comment">(查询)</span>，POST<span class="comment">(新增)</span>，PUT<span class="comment">(修改)</span>，DELETE<span class="comment">(删除)</span>)</span><br></pre></td></tr></table></figure>
<h2 id="技术点："><a href="#技术点：" class="headerlink" title="技术点："></a>技术点：</h2><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>基础框架—ssm(SpringMVC+Spring+MyBatis</span><br><span class="line"> <span class="number">2.</span> 数据库-MySQL</span><br><span class="line"><span class="number">3.</span>前端框架-bootstrap快速搭建简洁美观的界面</span><br><span class="line"><span class="number">4.</span>项目的依赖管理-Maven</span><br><span class="line"><span class="number">5.</span>分页-pagehelper</span><br><span class="line"><span class="number">6.</span>逆向工程-MyBatis Generator</span><br></pre></td></tr></table></figure>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><ul>
<li>主界面<br><img src="https://img-blog.csdnimg.cn/20200509133616225.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
<li>新增<br><img src="https://img-blog.csdnimg.cn/2020050913363932.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
<li>修改<br><img src="https://img-blog.csdnimg.cn/20200509133656587.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
<li>删除单个<br><img src="https://img-blog.csdnimg.cn/20200509133729756.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
<li>删除多个<br><img src="https://img-blog.csdnimg.cn/2020050913375956.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h3 id="项目的地址：https-github-com-clover426-atguigu-SSM"><a href="#项目的地址：https-github-com-clover426-atguigu-SSM" class="headerlink" title="项目的地址：https://github.com/clover426/atguigu_SSM"></a>项目的地址：<a href="https://github.com/clover426/atguigu_SSM" target="_blank" rel="noopener">https://github.com/clover426/atguigu_SSM</a></h3><h2 id="踩过的坑："><a href="#踩过的坑：" class="headerlink" title="踩过的坑："></a>踩过的坑：</h2><h3 id="第一个："><a href="#第一个：" class="headerlink" title="第一个："></a>第一个：</h3><img src="https://img-blog.csdnimg.cn/20200509133956245.png" alt="在这里插入图片描述"><h4 id="dispatcherServlet-servlet-xml在WEB-INF路径下"><a href="#dispatcherServlet-servlet-xml在WEB-INF路径下" class="headerlink" title="dispatcherServlet-servlet.xml在WEB-INF路径下"></a>dispatcherServlet-servlet.xml在WEB-INF路径下</h4><img src="https://img-blog.csdnimg.cn/20200509134001259.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h4 id="必须设置为资源路径"><a href="#必须设置为资源路径" class="headerlink" title="必须设置为资源路径"></a>必须设置为资源路径</h4><img src="https://img-blog.csdnimg.cn/20200509134007670.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h3 id="第二个："><a href="#第二个：" class="headerlink" title="第二个："></a>第二个：</h3>org.springframework.web.util.NestedServletException: Request processing failed; nested exception is org.springframework.jdbc.BadSqlGrammarException:<h3 id="Error-querying-database-Cause-com-mysql-jdbc-exceptions-jdbc4-MySQLSyntaxErrorException-Table-‘ssm-crud-d’-doesn’t-exist"><a href="#Error-querying-database-Cause-com-mysql-jdbc-exceptions-jdbc4-MySQLSyntaxErrorException-Table-‘ssm-crud-d’-doesn’t-exist" class="headerlink" title="Error querying database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Table ‘ssm_crud.d’ doesn’t exist"></a>Error querying database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Table ‘ssm_crud.d’ doesn’t exist</h3><h3 id="The-error-may-exist-in-file-I-Springmvctest-ssm-CRUD-target-classes-mapper-EmployeeMapper-xml"><a href="#The-error-may-exist-in-file-I-Springmvctest-ssm-CRUD-target-classes-mapper-EmployeeMapper-xml" class="headerlink" title="The error may exist in file [I:\Springmvctest\ssm_CRUD\target\classes\mapper\EmployeeMapper.xml]"></a>The error may exist in file [I:\Springmvctest\ssm_CRUD\target\classes\mapper\EmployeeMapper.xml]</h3><h3 id="The-error-may-involve-defaultParameterMap"><a href="#The-error-may-involve-defaultParameterMap" class="headerlink" title="The error may involve defaultParameterMap"></a>The error may involve defaultParameterMap</h3><h3 id="The-error-occurred-while-setting-parameters"><a href="#The-error-occurred-while-setting-parameters" class="headerlink" title="The error occurred while setting parameters"></a>The error occurred while setting parameters</h3><h3 id="SQL-SELECT-count-0-FROM-tbl-emp-e-LEFT-JOIN-d-ON-e-d-id-d-dept-id"><a href="#SQL-SELECT-count-0-FROM-tbl-emp-e-LEFT-JOIN-d-ON-e-d-id-d-dept-id" class="headerlink" title="SQL: SELECT count(0) FROM tbl_emp e LEFT JOIN d ON e.d_id = d.dept_id"></a>SQL: SELECT count(0) FROM tbl_emp e LEFT JOIN d ON e.<code>d_id</code> = d.<code>dept_id</code></h3><h3 id="Cause-com-mysql-jdbc-exceptions-jdbc4-MySQLSyntaxErrorException-Table-‘ssm-crud-d’-doesn’t-exist"><a href="#Cause-com-mysql-jdbc-exceptions-jdbc4-MySQLSyntaxErrorException-Table-‘ssm-crud-d’-doesn’t-exist" class="headerlink" title="Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Table ‘ssm_crud.d’ doesn’t exist"></a>Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Table ‘ssm_crud.d’ doesn’t exist</h3>; bad SQL grammar []; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Table ‘ssm_crud.d’ doesn’t exist</li>
</ul>
<pre><code>at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:982)
at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861)
at javax.servlet.http.HttpServlet.service(HttpServlet.java:668)
at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)
at org.springframework.test.web.servlet.TestDispatcherServlet.service(TestDispatcherServlet.java:65)
at javax.servlet.http.HttpServlet.service(HttpServlet.java:770)
at org.springframework.mock.web.MockFilterChain$ServletFilterProxy.doFilter(MockFilterChain.java:167)
at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:134)
at org.springframework.test.web.servlet.MockMvc.perform(MockMvc.java:155)
at com.itt.crud.test.MvcTest.testPage(MvcTest.java:45)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:75)
at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:86)
at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:84)
at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:252)
at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:94)
at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)
at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)
at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:191)
at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)</code></pre><p>Caused by: org.springframework.jdbc.BadSqlGrammarException:</p>
<h3 id="Error-querying-database-Cause-com-mysql-jdbc-exceptions-jdbc4-MySQLSyntaxErrorException-Table-‘ssm-crud-d’-doesn’t-exist-1"><a href="#Error-querying-database-Cause-com-mysql-jdbc-exceptions-jdbc4-MySQLSyntaxErrorException-Table-‘ssm-crud-d’-doesn’t-exist-1" class="headerlink" title="Error querying database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Table ‘ssm_crud.d’ doesn’t exist"></a>Error querying database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Table ‘ssm_crud.d’ doesn’t exist</h3><h3 id="The-error-may-exist-in-file-I-Springmvctest-ssm-CRUD-target-classes-mapper-EmployeeMapper-xml-1"><a href="#The-error-may-exist-in-file-I-Springmvctest-ssm-CRUD-target-classes-mapper-EmployeeMapper-xml-1" class="headerlink" title="The error may exist in file [I:\Springmvctest\ssm_CRUD\target\classes\mapper\EmployeeMapper.xml]"></a>The error may exist in file [I:\Springmvctest\ssm_CRUD\target\classes\mapper\EmployeeMapper.xml]</h3><h3 id="The-error-may-involve-defaultParameterMap-1"><a href="#The-error-may-involve-defaultParameterMap-1" class="headerlink" title="The error may involve defaultParameterMap"></a>The error may involve defaultParameterMap</h3><h3 id="The-error-occurred-while-setting-parameters-1"><a href="#The-error-occurred-while-setting-parameters-1" class="headerlink" title="The error occurred while setting parameters"></a>The error occurred while setting parameters</h3><h3 id="SQL-SELECT-count-0-FROM-tbl-emp-e-LEFT-JOIN-d-ON-e-d-id-d-dept-id-1"><a href="#SQL-SELECT-count-0-FROM-tbl-emp-e-LEFT-JOIN-d-ON-e-d-id-d-dept-id-1" class="headerlink" title="SQL: SELECT count(0) FROM tbl_emp e LEFT JOIN d ON e.d_id = d.dept_id"></a>SQL: SELECT count(0) FROM tbl_emp e LEFT JOIN d ON e.<code>d_id</code> = d.<code>dept_id</code></h3><h3 id="Cause-com-mysql-jdbc-exceptions-jdbc4-MySQLSyntaxErrorException-Table-‘ssm-crud-d’-doesn’t-exist-1"><a href="#Cause-com-mysql-jdbc-exceptions-jdbc4-MySQLSyntaxErrorException-Table-‘ssm-crud-d’-doesn’t-exist-1" class="headerlink" title="Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Table ‘ssm_crud.d’ doesn’t exist"></a>Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Table ‘ssm_crud.d’ doesn’t exist</h3><p>; bad SQL grammar []; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Table ‘ssm_crud.d’ doesn’t exist<br>    at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:231)<br>    at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:73)<br>    at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:73)<br>    at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:446)<br>    at com.sun.proxy.$Proxy22.selectList(Unknown Source)<br>    at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:230)<br>    at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:137)<br>    at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:75)<br>    at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)<br>    at com.sun.proxy.$Proxy23.selectByExampleWithDept(Unknown Source)<br>    at com.itt.crud.service.EmployeeService.getAll(EmployeeService.java:22)<br>    at com.itt.crud.service.EmployeeService$$FastClassBySpringCGLIB$$824f9610.invoke(<generated>)<br>    at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)<br>    at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:721)<br>    at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157)<br>    at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:99)<br>    at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:282)<br>    at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:96)<br>    at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)<br>    at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)<br>    at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)<br>    at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:656)<br>    at com.itt.crud.service.EmployeeService$$EnhancerBySpringCGLIB$$20270937.getAll(<generated>)<br>    at com.itt.crud.controller.EmployeeController.getEmps(EmployeeController.java:37)<br>    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)<br>    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)<br>    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)<br>    at java.lang.reflect.Method.invoke(Method.java:498)<br>    at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)<br>    at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133)<br>    at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:116)<br>    at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827)<br>    at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738)<br>    at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)<br>    at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:963)<br>    at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:897)<br>    at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)<br>    … 38 more<br>Caused by: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Table ‘ssm_crud.d’ doesn’t exist<br>    at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)<br>    at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)<br>    at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)<br>    at java.lang.reflect.Constructor.newInstance(Constructor.java:423)<br>    at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)<br>    at com.mysql.jdbc.Util.getInstance(Util.java:387)<br>    at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:939)<br>    at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3878)<br>    at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3814)<br>    at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2478)<br>    at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2625)<br>    at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2551)<br>    at com.mysql.jdbc.PreparedStatement.executeInternal(PreparedStatement.java:1861)<br>    at com.mysql.jdbc.PreparedStatement.execute(PreparedStatement.java:1192)<br>    at com.mchange.v2.c3p0.impl.NewProxyPreparedStatement.execute(NewProxyPreparedStatement.java:67)<br>    at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:63)<br>    at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:79)<br>    at org.apache.ibatis.executor.BatchExecutor.doQuery(BatchExecutor.java:93)<br>    at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:324)<br>    at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)<br>    at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109)<br>    at com.github.pagehelper.PageInterceptor.intercept(PageInterceptor.java:111)<br>    at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:61)<br>    at com.sun.proxy.$Proxy34.query(Unknown Source)<br>    at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:148)<br>    at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:141)<br>    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)<br>    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)<br>    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)<br>    at java.lang.reflect.Method.invoke(Method.java:498)<br>    at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:433)<br>    … 71 more</p>
<h4 id="解决的方法："><a href="#解决的方法：" class="headerlink" title="解决的方法："></a>解决的方法：</h4><blockquote>
<p>这个错误### SQL: SELECT count(0) FROM tbl_emp e LEFT JOIN d ON e.<code>d_id</code> = d.<code>dept_id</code><br>我们就知道，肯定是SQL有错误，这个的bug是在用LEFT JOIN时没有加表名，直接用了别名d才报的错！！！！！！</p>
</blockquote>
<h3 id="第三种："><a href="#第三种：" class="headerlink" title="第三种："></a>第三种：</h3><blockquote>
<p>在使用maven开发时，由于jar包版本的不同，有时候会有冲突之类的，所以在做的时候尽量的统一jar包的版本！切记！</p>
</blockquote>
]]></content>
      <categories>
        <category>SSM</category>
      </categories>
      <tags>
        <tag>SSM</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis开启Log4J日志</title>
    <url>/2020/06/22/Mybatis%E5%BC%80%E5%90%AFLog4j%E6%97%A5%E5%BF%97/</url>
    <content><![CDATA[<blockquote>
<p>在日常的开发中，日志有着非常重要的作用，通过日志可以排查错误！只要开启Log4J日志，并在配置文件中配置，就可以在程序运行中定位错误，再也不用system.out.println(…..)之类的打桩测试了！</p>
</blockquote>
<a id="more"></a>

<ul>
<li><h2 id="1-引入maven坐标"><a href="#1-引入maven坐标" class="headerlink" title="1.引入maven坐标"></a>1.引入maven坐标</h2>   <figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!-- https:<span class="comment">//mvnrepository.com/artifact/log4j/log4j --&gt;</span></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;log4j&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;log4j&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.2.17&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<h2 id="2-在主配置文件中开启日志"><a href="#2-在主配置文件中开启日志" class="headerlink" title="2.在主配置文件中开启日志"></a>2.在主配置文件中开启日志</h2>   <figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;settings&gt;</span><br><span class="line">    &lt;!--开启日志，并指定使用的具体日志--&gt;</span><br><span class="line">    &lt;setting name=<span class="string">"LogImpl"</span> value=<span class="string">"LOG4J"</span>/&gt;</span><br><span class="line"> &lt;/settings&gt;</span><br></pre></td></tr></table></figure>
<h2 id="3-编写日志文件（log4j-properties）"><a href="#3-编写日志文件（log4j-properties）" class="headerlink" title="3.编写日志文件（log4j.properties）"></a>3.编写日志文件（log4j.properties）</h2>   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">log4j.rootLogger=DEBUG,Console</span><br><span class="line">log4j.appender.Console=org.apache.log4j.ConsoleAppender </span><br><span class="line">log4j.appender.Console.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.Console.layout.ConversionPattern= [%t] %-<span class="number">5</span>p [%c] - %m%n</span><br></pre></td></tr></table></figure>
<h2 id="4-测试"><a href="#4-测试" class="headerlink" title="4.测试"></a>4.测试</h2><p>   <img src="https://img-blog.csdnimg.cn/20200325091334608.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="这样就成功了！"><a href="#这样就成功了！" class="headerlink" title="这样就成功了！"></a>这样就成功了！</h2><p>   ​</p>
</li>
</ul>
]]></content>
      <categories>
        <category>mybatis</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC@RequestBody获取发送的ajax请求数据</title>
    <url>/2020/04/24/SpringMVC@RequestBody%E8%8E%B7%E5%8F%96%E5%8F%91%E9%80%81%E7%9A%84ajax%E8%AF%B7%E6%B1%82%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<blockquote>
<p>在获取前端发送的ajax请求时，如果不使用@RequestBody则拿不到请求体中的数据，那么我们来使用@RequestBody获取ajax请求发送的数据</p>
</blockquote>
<a id="more"></a>

<ul>
<li>response.jsp</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%--引入资源--%</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.11.1.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//页面加载，绑定单击事件</span></span></span><br><span class="line"><span class="javascript">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"#btn"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">//alert("hello btn");</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">//发送ajax请求</span></span></span><br><span class="line"><span class="javascript">                $.ajax(&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">//编写json格式，设置属性和值</span></span></span><br><span class="line"><span class="actionscript">                    url:<span class="string">"user/testAjax"</span>,</span></span><br><span class="line"><span class="actionscript">                    contentType:<span class="string">"application/json;charset=UTF-8"</span>,</span></span><br><span class="line"><span class="actionscript">                    data:<span class="string">'&#123;"username":"hk","password","5201314","age","20"&#125;'</span>,</span></span><br><span class="line"><span class="actionscript">                    dataType:<span class="string">"json"</span>,</span></span><br><span class="line"><span class="actionscript">                    type:<span class="string">"post"</span>,</span></span><br><span class="line"><span class="actionscript">                    success:<span class="function"><span class="keyword">function</span> <span class="params">(data)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                        <span class="comment">//data服务器端响应的json的数据，进行解析</span></span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">%--</span> 模拟异步请求<span class="attr">ajax--</span>%&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>发送ajax的请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>UserController.class(控制器)<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟异步请求响应</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/testAjax"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAjax</span><span class="params">(@RequestBody String body)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"testAjax执行了..."</span>);</span><br><span class="line">        System.out.println(body);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="注意：使用-RequestBody是为了获得请求体中的所有内容"><a href="#注意：使用-RequestBody是为了获得请求体中的所有内容" class="headerlink" title="注意：使用@RequestBody是为了获得请求体中的所有内容"></a>注意：使用@RequestBody是为了获得请求体中的所有内容</h2></li>
<li>运行<br><img src="https://img-blog.csdnimg.cn/20200424010432401.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h2 id="点击发送ajax请求，然后我们查看控制台"><a href="#点击发送ajax请求，然后我们查看控制台" class="headerlink" title="点击发送ajax请求，然后我们查看控制台"></a>点击发送ajax请求，然后我们查看控制台</h2><img src="https://img-blog.csdnimg.cn/20200424010518947.png" alt="在这里插入图片描述"><h2 id="这样我们就可以拿到了ajax请求中的所有的数据了！"><a href="#这样我们就可以拿到了ajax请求中的所有的数据了！" class="headerlink" title="这样我们就可以拿到了ajax请求中的所有的数据了！"></a>这样我们就可以拿到了ajax请求中的所有的数据了！</h2></li>
</ul>
]]></content>
      <categories>
        <category>SpringMVC</category>
      </categories>
      <tags>
        <tag>-json -ajax</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis的源码解析(一)：SqlSessionFactory</title>
    <url>/2020/04/22/Mybatis%E7%9A%84%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90(%E4%B8%80)%EF%BC%9ASqlSessionFactory/</url>
    <content><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200623001806245.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<a id="more"></a>

<p><img src="https://img-blog.csdnimg.cn/20200329151126327.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<blockquote>
<p>Mybatis的执行步骤：</p>
</blockquote>
<h2 id="1-获得SqlSessionFactory对象"><a href="#1-获得SqlSessionFactory对象" class="headerlink" title="1.获得SqlSessionFactory对象"></a>1.获得SqlSessionFactory对象</h2><ul>
<li><p>首先将所有的配置信息都存放到configuration中，包括：settingsElement，mapperElement<br><img src="https://img-blog.csdnimg.cn/20200329142434544.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt=""></p>
</li>
<li><p>settingsElement<br><img src="https://img-blog.csdnimg.cn/20200329142659185.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</li>
<li><p>mapperElement<br><img src="https://img-blog.csdnimg.cn/20200329142838712.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</li>
<li><p>解析resource下的每一个mapper<br><img src="https://img-blog.csdnimg.cn/20200329142933520.png" alt="在这里插入图片描述">)<img src="https://img-blog.csdnimg.cn/20200329144235595.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200329144421186.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200329144601561.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200329144900921.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200329150446480.png" alt="在这里插入图片描述"></p>
</li>
<li><p>所有的<strong>xxxMapper文件中的标签及参数</strong>都存放在<strong>MappedStatement对象</strong>中<br><img src="https://img-blog.csdnimg.cn/20200329150541553.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</li>
<li><p>然后将所有的配置信息，标签放到configuration对象中</p>
</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20200329145304272.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<ul>
<li>最后因为DefaultSqlSessionFactory是SqlSessionFactory的实现类<br><img src="https://img-blog.csdnimg.cn/20200329145453883.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200329145703647.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
<li>所以最后得到的是SqlSessionFactory对象</li>
</ul>
<blockquote>
<p>结论：</p>
</blockquote>
<h5 id="SqlSessionFactory对象—》DefaultSqlSessionFactory—》Configuration—》所有的配置信息"><a href="#SqlSessionFactory对象—》DefaultSqlSessionFactory—》Configuration—》所有的配置信息" class="headerlink" title="SqlSessionFactory对象—》DefaultSqlSessionFactory—》Configuration—》所有的配置信息"></a>SqlSessionFactory对象—》DefaultSqlSessionFactory—》Configuration—》所有的配置信息</h5>]]></content>
      <categories>
        <category>mybatis</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis的源码解析(二)：SqlSession</title>
    <url>/2020/01/01/Mybatis%E7%9A%84%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90(%E4%BA%8C)%EF%BC%9ASqlSession/</url>
    <content><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200623001806245.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<a id="more"></a>

<p><img src="https://img-blog.csdnimg.cn/20200329151126327.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<blockquote>
<p>Mybatis的执行步骤：</p>
</blockquote>
<h2 id="2-获取SqlSession对象"><a href="#2-获取SqlSession对象" class="headerlink" title="2.获取SqlSession对象"></a>2.获取SqlSession对象</h2><ul>
<li>从配置文件中取出Exceutor（执行器），调用openSessionFromDataSource()<br><img src="https://img-blog.csdnimg.cn/20200329170849842.png" alt="在这里插入图片描述"></li>
<li>新建的执行器的类型默认为：SIMPLE<br><img src="https://img-blog.csdnimg.cn/20200329171109633.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
<li>执行器的类型有三种：<br><img src="https://img-blog.csdnimg.cn/20200329171214603.png" alt="在这里插入图片描述"></li>
<li>注意：<br><img src="https://img-blog.csdnimg.cn/20200329171341732.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">executor = (Executor) interceptorChain.pluginAll(executor);</span><br></pre></td></tr></table></figure>
对Executor进行拦截增强 ，这里使用的设计模式为<strong>装饰者模式</strong></li>
<li>然后返回：<strong>DefaultSqlSession(configuratioin,executor,事务问题)</strong><br>Executor执行 configuratioin中的增删改<img src="https://img-blog.csdnimg.cn/20200329172921227.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><blockquote>
<p>总结：得到SqlSession的过程</p>
<blockquote>
</blockquote>
</blockquote>
</li>
<li>首先SqlSessionFactory调用openSession()<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SqlSession session = sessionFactory.openSession();</span><br></pre></td></tr></table></figure></li>
<li>然后<strong>openSession()</strong> 调用 <strong>openSessionFromDataSource()</strong><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> SqlSession <span class="title">openSession</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> openSessionFromDataSource(configuration.getDefaultExecutorType(), <span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>返回<strong>DefaultSqlSession对象</strong>，注意DefaultSqlSession包括： <strong>(configuration,executor,事务)</strong><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> SqlSession <span class="title">openSessionFromDataSource</span><span class="params">(ExecutorType execType, TransactionIsolationLevel level, <span class="keyword">boolean</span> autoCommit)</span> </span>&#123;</span><br><span class="line">  Transaction tx = <span class="keyword">null</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> Environment environment = configuration.getEnvironment();</span><br><span class="line">    <span class="keyword">final</span> TransactionFactory transactionFactory = getTransactionFactoryFromEnvironment(environment);</span><br><span class="line">    tx = transactionFactory.newTransaction(environment.getDataSource(), level, autoCommit);</span><br><span class="line">    <span class="comment">//创建一个新的执行器，类型为execType</span></span><br><span class="line">    <span class="keyword">final</span> Executor executor = configuration.newExecutor(tx, execType);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DefaultSqlSession(configuration, executor, autoCommit);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    closeTransaction(tx); <span class="comment">// may have fetched a connection so lets call close()</span></span><br><span class="line">    <span class="keyword">throw</span> ExceptionFactory.wrapException(<span class="string">"Error opening session.  Cause: "</span> + e, e);</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    ErrorContext.instance().reset();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
</ul>
<p>​    </p>
]]></content>
      <categories>
        <category>mybatis</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>java中打印一个数组名或者对象名，出来一个地址是怎么回事？</title>
    <url>/2020/07/20/java%E4%B8%AD%E6%89%93%E5%8D%B0%E4%B8%80%E4%B8%AA%E6%95%B0%E7%BB%84%E5%90%8D%E6%88%96%E8%80%85%E5%AF%B9%E8%B1%A1%E5%90%8D%EF%BC%8C%E5%87%BA%E6%9D%A5%E4%B8%80%E4%B8%AA%E5%9C%B0%E5%9D%80%E6%98%AF%E6%80%8E%E4%B9%88%E5%9B%9E%E4%BA%8B%EF%BC%9F/</url>
    <content><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200721091830339.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<a id="more"></a>

<p>相信大家在学java的过程中，一定打印过对象名：下面直接看这个例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后下面测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">     Student stu = <span class="keyword">new</span> Student();</span><br><span class="line">     System.out.println(stu);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>下面看运行结果：<br><img src="https://img-blog.csdnimg.cn/20200720214411902.png" alt="在这里插入图片描述"><br>WX，我打印的不是对象吗，为什么给我打印出这么一堆不是人读的玩意，这个就要从创建对象时说起。<br>在创建对象时，默认的toString方法是Object中的toString()方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getClass().getName() + <span class="string">"@"</span> + Integer.toHexString(hashCode());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>所以打印的就是这个样子的!那么我们就可以在Student中重写toString方法，覆盖掉Object中的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Student&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后测试：<br><img src="https://img-blog.csdnimg.cn/20200720220044788.png" alt="在这里插入图片描述"></p>
<p>这下就可以打印了，所以在使用时必须重写toString方法，否则默认的就是Object的toString方法！</p>
]]></content>
      <categories>
        <category>java#分类</category>
      </categories>
      <tags>
        <tag>-java</tag>
      </tags>
  </entry>
  <entry>
    <title>ajax的方式对随机生成的4位验证码进行验证(小可爱都能学会的那种)</title>
    <url>/2020/06/07/ajax%E7%9A%84%E6%96%B9%E5%BC%8F%E5%AF%B9%E9%9A%8F%E6%9C%BA%E7%94%9F%E6%88%90%E7%9A%844%E4%BD%8D%E9%AA%8C%E8%AF%81%E7%A0%81%E8%BF%9B%E8%A1%8C%E9%AA%8C%E8%AF%81(%E5%B0%8F%E5%8F%AF%E7%88%B1%E9%83%BD%E8%83%BD%E5%AD%A6%E4%BC%9A%E7%9A%84%E9%82%A3%E7%A7%8D)/</url>
    <content><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200606235737643.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<a id="more"></a>
<blockquote>
<h3 id="最近我的小可爱说，她不会用jax的方式对随机生成的4位验证码进行验证，我当时就急了，这不得展示一下我的“技术”，美美的撩五我的小可爱！"><a href="#最近我的小可爱说，她不会用jax的方式对随机生成的4位验证码进行验证，我当时就急了，这不得展示一下我的“技术”，美美的撩五我的小可爱！" class="headerlink" title="最近我的小可爱说，她不会用jax的方式对随机生成的4位验证码进行验证，我当时就急了，这不得展示一下我的“技术”，美美的撩五我的小可爱！"></a>最近我的小可爱说，她不会用jax的方式对随机生成的4位验证码进行验证，我当时就急了，这不得展示一下我的“技术”，美美的撩五我的小可爱！</h3></blockquote>
<blockquote>
<p>正文区</p>
</blockquote>
<h4 id="相信大家在实现登录的时候，都使用过验证码，传统的方式是servlet的方式，在servlet中定义一个处理器，然后再进行验证，整个form中的数据只能一次性的整个提交，提交之后交给servlet来处理，判断哪一个条件不符合然后，给用户提示："><a href="#相信大家在实现登录的时候，都使用过验证码，传统的方式是servlet的方式，在servlet中定义一个处理器，然后再进行验证，整个form中的数据只能一次性的整个提交，提交之后交给servlet来处理，判断哪一个条件不符合然后，给用户提示：" class="headerlink" title="相信大家在实现登录的时候，都使用过验证码，传统的方式是servlet的方式，在servlet中定义一个处理器，然后再进行验证，整个form中的数据只能一次性的整个提交，提交之后交给servlet来处理，判断哪一个条件不符合然后，给用户提示："></a>相信大家在实现登录的时候，都使用过验证码，传统的方式是servlet的方式，在servlet中定义一个处理器，然后再进行验证，整个form中的数据只能一次性的整个提交，提交之后交给servlet来处理，判断哪一个条件不符合然后，给用户提示：</h4><p><img src="https://img-blog.csdnimg.cn/20200606232442688.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h4 id="但是大家有没有发现，这样的效率太低了，如果我直接输入用户名，通过发ajax请求，在控制器中直接-进行判断-，然后将结果通过局部刷新的方式响应给用户，这样就会大大提交效率，下面我们用发ajax的方式对验证码进行局部刷新！"><a href="#但是大家有没有发现，这样的效率太低了，如果我直接输入用户名，通过发ajax请求，在控制器中直接-进行判断-，然后将结果通过局部刷新的方式响应给用户，这样就会大大提交效率，下面我们用发ajax的方式对验证码进行局部刷新！" class="headerlink" title="但是大家有没有发现，这样的效率太低了，如果我直接输入用户名，通过发ajax请求，在控制器中直接 进行判断 ，然后将结果通过局部刷新的方式响应给用户，这样就会大大提交效率，下面我们用发ajax的方式对验证码进行局部刷新！"></a>但是大家有没有发现，这样的效率太低了，如果我直接输入用户名，通过发ajax请求，在控制器中直接 进行判断 ，然后将结果通过局部刷新的方式响应给用户，这样就会大大提交效率，下面我们用发ajax的方式对验证码进行局部刷新！</h4><blockquote>
<p>代码区</p>
</blockquote>
<h4 id="首先你得有一个验证码，当然，这个验证码是一个图片："><a href="#首先你得有一个验证码，当然，这个验证码是一个图片：" class="headerlink" title="首先你得有一个验证码，当然，这个验证码是一个图片："></a>首先你得有一个验证码，当然，这个验证码是一个图片：</h4><ul>
<li>imgs.jsp</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;%<span class="meta">@page</span> <span class="keyword">import</span>=<span class="string">"javax.imageio.ImageIO"</span>%&gt;</span><br><span class="line">&lt;%<span class="meta">@page</span> <span class="keyword">import</span>=<span class="string">"java.awt.image.BufferedImage"</span>%&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"java.awt.*"</span> %&gt;</span><br><span class="line">&lt;%@ page language=<span class="string">"java"</span> <span class="keyword">import</span>=<span class="string">"java.util.*"</span> pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">"image/jpeg; charset=UTF-8"</span> language=<span class="string">"java"</span>%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%!</span><br><span class="line">	<span class="comment">//随机产生颜色</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Color <span class="title">getColor</span><span class="params">()</span></span>&#123;</span><br><span class="line">		Random ran = <span class="keyword">new</span> Random();</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">int</span> r = ran.nextInt(<span class="number">256</span>);</span><br><span class="line">		<span class="keyword">int</span> g = ran.nextInt(<span class="number">256</span>);</span><br><span class="line">		<span class="keyword">int</span> b = ran.nextInt(<span class="number">256</span>);</span><br><span class="line">	</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Color(r,g,b);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//产生验证码值</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getNum</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="comment">//1000-9999</span></span><br><span class="line">		<span class="keyword">int</span> ran = (<span class="keyword">int</span>)(Math.random()*<span class="number">9000</span>)+<span class="number">1000</span>;</span><br><span class="line">		<span class="keyword">return</span> String.valueOf(ran);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">%&gt;</span><br><span class="line">&lt;%</span><br><span class="line"></span><br><span class="line">	<span class="comment">//禁止缓存，防止验证码过期</span></span><br><span class="line">	response.setHeader(<span class="string">"Prama"</span>, <span class="string">"no-cache"</span>);</span><br><span class="line">	response.setHeader(<span class="string">"Cache-control"</span>, <span class="string">"no-cache"</span>);</span><br><span class="line">	response.setHeader(<span class="string">"Expires"</span>, <span class="string">"0"</span>);</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//绘制验证码</span></span><br><span class="line">	BufferedImage image = <span class="keyword">new</span> BufferedImage(<span class="number">80</span>,<span class="number">30</span>,BufferedImage.TYPE_INT_BGR);</span><br><span class="line">	<span class="comment">//画笔</span></span><br><span class="line">	Graphics graphics = image.getGraphics();</span><br><span class="line">	graphics.fillRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">80</span>, <span class="number">30</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//绘制干扰线条</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">60</span>;i++)&#123;</span><br><span class="line">		Random ran = <span class="keyword">new</span> Random();</span><br><span class="line">		<span class="keyword">int</span> xBegin = ran.nextInt(<span class="number">80</span>);</span><br><span class="line">		<span class="keyword">int</span> yBegin = ran.nextInt(<span class="number">30</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">int</span> xEnd = ran.nextInt(xBegin + <span class="number">10</span>);</span><br><span class="line">		<span class="keyword">int</span> yEnd = ran.nextInt(yBegin + <span class="number">10</span>);</span><br><span class="line">		</span><br><span class="line">		graphics.setColor(getColor());</span><br><span class="line">		<span class="comment">//绘制线条</span></span><br><span class="line">		graphics.drawLine(xBegin, yBegin, xEnd, yEnd);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">		graphics.setFont(<span class="keyword">new</span> Font(<span class="string">"seif"</span>,Font.BOLD,<span class="number">20</span>));</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//绘制验证码</span></span><br><span class="line">		graphics.setColor(Color.BLACK);</span><br><span class="line">		</span><br><span class="line">		String checkCode = getNum();</span><br><span class="line">		StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; checkCode.length();i++)&#123;</span><br><span class="line">			sb.append(checkCode.charAt(i)+<span class="string">" "</span>);<span class="comment">//验证码的每一位数字</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//</span></span><br><span class="line">		graphics.drawString(sb.toString(), <span class="number">15</span>, <span class="number">20</span>);<span class="comment">//绘制验证码</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">//将验证码真实值 保存在session中，供使用时比较真实性</span></span><br><span class="line">		session.setAttribute(<span class="string">"CKECKCODE"</span>,checkCode);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//真实的产生图片</span></span><br><span class="line">		ImageIO.write(image, <span class="string">"jpeg"</span>, response.getOutputStream());</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//关闭操作</span></span><br><span class="line">		out.clear();</span><br><span class="line">		out = pageContext.pushBody();</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>
<h4 id="这里用的是bootstrap，不会用的大家可以去恶补一下，当然-大家也可以自由发挥，主要是要搞懂原理："><a href="#这里用的是bootstrap，不会用的大家可以去恶补一下，当然-大家也可以自由发挥，主要是要搞懂原理：" class="headerlink" title="这里用的是bootstrap，不会用的大家可以去恶补一下，当然 大家也可以自由发挥，主要是要搞懂原理："></a>这里用的是bootstrap，不会用的大家可以去恶补一下，当然 大家也可以自由发挥，主要是要搞懂原理：</h4><ul>
<li>index.jsp</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-group"</span>&gt;</span><br><span class="line">        &lt;label class="col-sm-2 control-label"&gt;验&amp;nbsp;&amp;nbsp;证&amp;nbsp;&amp;nbsp;码：&lt;/label&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-sm-10"</span> style=<span class="string">"width: 90px;padding-left: 30px"</span>&gt;</span><br><span class="line">               &lt;input type=<span class="string">"text"</span> style=<span class="string">"width: 90px;display:block"</span> id=<span class="string">"checkcodeId"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-control"</span> name=<span class="string">"Yzm"</span> placeholder=<span class="string">"验证码"</span>&gt;</span><br><span class="line">         &lt;/div&gt;</span><br><span class="line">         &lt;!--&lt;input <span class="class"><span class="keyword">class</span></span>=<span class="string">"yzm"</span> type=<span class="string">"text"</span> id=<span class="string">"checkcode"</span> name=<span class="string">"checkcode"</span>size=<span class="string">"4"</span>&gt;--&gt;</span><br><span class="line">         &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"imghh"</span>style=<span class="string">"float: left;padding-left: 40px"</span>&gt;</span><br><span class="line">               &lt;img src=<span class="string">"imgs.jsp"</span> id=<span class="string">"get_Yzm"</span> name=<span class="string">"Img"</span> onclick=<span class="string">"reImg();"</span>/&gt;&lt;br/&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        <span class="comment">//用来显示验证后的验证码的正确性</span></span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-sm-2"</span>&gt;</span><br><span class="line">               &lt;span id="tip" style="vertical-align: middle;position: absolute ;left: 50px"&gt;&lt;/span&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;script type=<span class="string">"text/javascript"</span> &gt;</span><br><span class="line">        <span class="function">function <span class="title">reImg</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">var</span> img = document.getElementById(<span class="string">"Img"</span>);</span><br><span class="line">            <span class="keyword">var</span> i = Math.random();</span><br><span class="line">            img.src=<span class="string">"imgs.jsp?id="</span>+i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//jquery的入口函数</span></span><br><span class="line">		$(function () &#123;</span><br><span class="line">			<span class="comment">//id为checkcodeId，鼠标失去焦点时，发ajax请求</span></span><br><span class="line">            $(<span class="string">"#checkcodeId"</span>).blur(function () &#123;</span><br><span class="line">                <span class="comment">//拿到id为checkcodeId输入框中的值</span></span><br><span class="line">                <span class="keyword">var</span> $Yzm = $(<span class="string">"#checkcodeId"</span>).val();</span><br><span class="line">                $.ajax(&#123;</span><br><span class="line">                    url:<span class="string">"getYzm"</span>,<span class="comment">//请求的url</span></span><br><span class="line">                    type:<span class="string">"POST"</span>,<span class="comment">//发送请求的方式为POST</span></span><br><span class="line">                    data:<span class="string">"Yzm="</span>+$Yzm,<span class="comment">//传入的参数拿到的输入框中的值 </span></span><br><span class="line">                    success:function (result) &#123;</span><br><span class="line">                        <span class="keyword">var</span> resultHtml = $(<span class="string">"&lt;img src='"</span>+result+<span class="string">"' height='30px' width='30px'&gt;"</span>);</span><br><span class="line">                        <span class="comment">//将这个标签通过html的方式写入到id为tip的位置上</span></span><br><span class="line">                        <span class="comment">//注意通过html的方式可以保留标签</span></span><br><span class="line">                        $(<span class="string">"#tip"</span>).html(resultHtml);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">   &lt;/script&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>loginController.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/getYzm"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">getYzm</span><span class="params">(HttpServletRequest request , HttpServletResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		<span class="comment">//定义初值</span></span><br><span class="line">        String resultTyp = <span class="string">"img/x.png"</span>;</span><br><span class="line">		<span class="comment">//拿到用户输入的值</span></span><br><span class="line">        String YzmClient = request.getParameter(<span class="string">"Yzm"</span>);</span><br><span class="line">		<span class="comment">//获取服务器中session中的值 </span></span><br><span class="line">        String YzmService = (String)request.getSession().getAttribute((<span class="string">"CKECKCODE"</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(YzmService);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (YzmService.equals(YzmClient))&#123;</span><br><span class="line">            resultTyp=<span class="string">"img/v.png"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        response.setContentType(<span class="string">"text/html; charset=UTF-8"</span>);</span><br><span class="line">        PrintWriter writer = response.getWriter();<span class="comment">//输出流</span></span><br><span class="line"></span><br><span class="line">        writer.write(resultTyp);</span><br><span class="line">        writer.flush();</span><br><span class="line">        writer.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>效果区</p>
</blockquote>
<h4 id="好了，下面我们来看实现的效果："><a href="#好了，下面我们来看实现的效果：" class="headerlink" title="好了，下面我们来看实现的效果："></a>好了，下面我们来看实现的效果：</h4><p><img src="https://img-blog.csdnimg.cn/20200606234846786.gif#pic_center" alt="在这里插入图片描述"></p>
<blockquote>
<p>前方高能：</p>
</blockquote>
<h2 id="这两个图标我也给大家，要不然大家找也不方便："><a href="#这两个图标我也给大家，要不然大家找也不方便：" class="headerlink" title="这两个图标我也给大家，要不然大家找也不方便："></a>这两个图标我也给大家，要不然大家找也不方便：</h2><blockquote>
<p>链接：<a href="https://pan.baidu.com/s/1AUDymnlmwKvAB_O5pPRttA" target="_blank" rel="noopener">https://pan.baidu.com/s/1AUDymnlmwKvAB_O5pPRttA</a><br>提取码：gig7</p>
</blockquote>
<h3 id="这就是通过ajax的方式异步进行验证码的验证的过程，如果过程中有什么问题，希望大家不吝赐教！"><a href="#这就是通过ajax的方式异步进行验证码的验证的过程，如果过程中有什么问题，希望大家不吝赐教！" class="headerlink" title="这就是通过ajax的方式异步进行验证码的验证的过程，如果过程中有什么问题，希望大家不吝赐教！"></a>这就是通过ajax的方式异步进行验证码的验证的过程，如果过程中有什么问题，希望大家不吝赐教！</h3><h3 id="怎么样，我的小可爱都学会了，大家怎么样了，大家可以在评论区留言哦！"><a href="#怎么样，我的小可爱都学会了，大家怎么样了，大家可以在评论区留言哦！" class="headerlink" title="怎么样，我的小可爱都学会了，大家怎么样了，大家可以在评论区留言哦！"></a>怎么样，我的小可爱都学会了，大家怎么样了，大家可以在评论区留言哦！</h3><p><img src="https://img-blog.csdnimg.cn/20200606235625568.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>ajax</category>
      </categories>
      <tags>
        <tag>ajax</tag>
      </tags>
  </entry>
  <entry>
    <title>java中的反射机制</title>
    <url>/2020/04/17/java%E4%B8%AD%E7%9A%84%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h1 id="java中的反射机制"><a href="#java中的反射机制" class="headerlink" title="java中的反射机制"></a>java中的反射机制</h1><a id="more"></a>
<h2 id="1-类加载器：ClassLoader"><a href="#1-类加载器：ClassLoader" class="headerlink" title="1.类加载器：ClassLoader"></a>1.类加载器：ClassLoader</h2><p><img src="C:%5CUsers%5C%E5%8D%95%E5%B0%91%E5%AE%9D%E5%AE%9D%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1580977084726.png" alt="1580977084726"></p>
<p>​           Class.forName(“全类名”)                              类名.Class                                                         对象.getClass()</p>
<ul>
<li><p>反射：将类的各个组成部分封装为其他对象，这就是反射机制。    </p>
</li>
<li><p>好处：</p>
<ol>
<li><p>可以在程序运行过程中，操作这些对象</p>
</li>
<li><p>可以解耦，提高程序的可扩展性。</p>
</li>
</ol>
</li>
<li><p>获取Class对象的方式：</p>
<ol>
<li>Class.forName(“全类名”)：将字节码文件加载进内存，返回内存对象</li>
</ol>
<ul>
<li>多用于配置文件，将类名定义在配置文件中。读取文件，加载类</li>
</ul>
<ol start="2">
<li>类名.class：通过类名的属性</li>
</ol>
<ul>
<li>多用于参数的传递</li>
</ul>
<ol start="3">
<li><p>对象.getClass()：getClass()方法在Object类中定义着。</p>
<ul>
<li>多用于对象的获取字节码的方式</li>
</ul>
</li>
</ol>
</li>
</ul>
<h2 id="2-结论："><a href="#2-结论：" class="headerlink" title="2.结论："></a>2.结论：</h2><p>同一个字节码文件(*.class)在一次程序运行过程中，只会被加载一次，不论通过哪一种方式获取的</p>
<p>Class对象都是同一个。</p>
<h2 id="3-Class对象的功能："><a href="#3-Class对象的功能：" class="headerlink" title="3.Class对象的功能："></a>3.Class对象的功能：</h2><ul>
<li><p>获取功能：</p>
<ol>
<li><p>获取成员变量们</p>
<ul>
<li><p>Field[]     getFields()：获取所有 public修饰的成员变量</p>
</li>
<li><p>Field        getField(String name) ：获取指定public修饰的成员变量</p>
</li>
</ul>
</li>
</ol>
</li>
</ul>
<pre><code> * Field        getDeclaredFields() ：获取所有成员变量，不考虑修饰符

 * Field        getDeclaredField(String name)

2. 获取构造方法们

 * Constructor&lt;?&gt;[]            getConstructors()   获取数组 

 * Constructor&lt;T&gt;             getConstructor(类&lt;?&gt;... parameterTypes)   获取单个指定的


 * Constructor&lt;T&gt;             getDeclaredConstructor(类&lt;?&gt;... parameterTypes)  

 * Constructor&lt;?&gt;[]            getDeclaredConstructors()  

3. 获取成员方法们

 * Method[ ]  getMethods()

 * Method getMethod(String name,类&lt;?&gt; ... parameterTypes)


 * Method[ ]  getDeclaredMethods()

 * Method  getDeclaredMethod(String name,类&lt;?&gt; ... parameterTypes)

4. 获取类名

 * String   getName()</code></pre><ul>
<li><p>Field:成员变量</p>
<ul>
<li>操作：<ol>
<li>设置值 <ul>
<li>void set(Object obj,Object value)</li>
</ul>
</li>
<li>获取值 <ul>
<li>get(Object obj)</li>
</ul>
</li>
<li>忽略访问权限修饰符的安全检查<ul>
<li>setAccessible(true);//暴力反射</li>
</ul>
</li>
</ol>
</li>
</ul>
</li>
<li><p>Constructor：构造方法</p>
<ul>
<li>创建对象：<ul>
<li>T newInstance(Object… initargs)</li>
<li>如何使用空参构造方法创建对象，操作可以简化 ：Class对象的newInstance方法</li>
</ul>
</li>
</ul>
</li>
<li><p>Method：方法对象</p>
<ul>
<li>执行方法：<ul>
<li>Object    invoke(Object   obj,object…  args)</li>
</ul>
</li>
<li>获取方法名称：<ul>
<li>String  getName   获取方法名</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="4-案例："><a href="#4-案例：" class="headerlink" title="4.案例："></a>4.案例：</h2><ul>
<li><p>需求：写一个”框架“，不能改变该类的任何代码的前提下，可以帮助我们创建任意类的对象，并且执行其中任意方法</p>
<ul>
<li><p>实现：</p>
<ol>
<li><p>配置文件</p>
</li>
<li><p>反射</p>
</li>
</ol>
</li>
<li><p>步骤：</p>
<ol>
<li>将需要创建的对象的全类名和需要执行的方法定义在配置文件中  </li>
<li>在程序中加载读取配置文件</li>
</ol>
</li>
</ul>
</li>
</ul>
<p>​                  3. 使用反射技术来加载类文件进内存</p>
<ol start="4">
<li><p>创建对象</p>
<ol start="5">
<li><p>执行方法</p>
<p>实现的方法：（ReflectTest.java）</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.加载配置文件</span></span><br><span class="line">        <span class="comment">//1.1创建Properties对象</span></span><br><span class="line">        Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">//1.2加载配置文件，转换为一个集合</span></span><br><span class="line">        <span class="comment">//1.2.1获取class目录下的配置文件</span></span><br><span class="line">        ClassLoader classLoader = ReflectTest<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>()</span>;</span><br><span class="line">        InputStream is = classLoader.getResourceAsStream(<span class="string">"pro.properties"</span>);</span><br><span class="line">        pro.load(is);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取配置文件中定义的数据</span></span><br><span class="line">        String className = pro.getProperty(<span class="string">"className"</span>);</span><br><span class="line">        String methodName = pro.getProperty(<span class="string">"methodName"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.加载该类进内存</span></span><br><span class="line">        Class cls = Class.forName(className);</span><br><span class="line">        <span class="comment">//4.创建对象</span></span><br><span class="line">        Object obj = cls.newInstance();</span><br><span class="line">        <span class="comment">//5.获取方法的对象</span></span><br><span class="line">        Method method = cls.getMethod(methodName);</span><br><span class="line">        <span class="comment">//6.执行方法</span></span><br><span class="line">        method.invoke(obj);</span><br></pre></td></tr></table></figure>
</li>
</ol>
<ul>
<li>配置文件：（pro.properties）</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">className=tree.Student</span><br><span class="line">methodName=sleep</span><br></pre></td></tr></table></figure>









]]></content>
  </entry>
  <entry>
    <title>java实现顺序存储二叉树</title>
    <url>/2020/07/27/java%E5%AE%9E%E7%8E%B0%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    <content><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200727233458687.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<a id="more"></a>

<blockquote>
<p>存储二叉树时，我们一般都用的是数组，不过在访问的时候是通过数组的下标来模拟访问！</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20200727155538753.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h5 id="使用数组存放时只能从0开始存储，但是我们可以通过一定的规则对数组进行遍历就可以得到二叉树的的遍历的结果，下面我们先看一个遍历的规则："><a href="#使用数组存放时只能从0开始存储，但是我们可以通过一定的规则对数组进行遍历就可以得到二叉树的的遍历的结果，下面我们先看一个遍历的规则：" class="headerlink" title="使用数组存放时只能从0开始存储，但是我们可以通过一定的规则对数组进行遍历就可以得到二叉树的的遍历的结果，下面我们先看一个遍历的规则："></a>使用数组存放时只能从0开始存储，但是我们可以通过一定的规则对数组进行遍历就可以得到二叉树的的遍历的结果，下面我们先看一个遍历的规则：</h5><blockquote>
<p>顺序存储二叉树的特点：（这里的n指的是元素当前的索引值 ）<br>1.顺序二叉树通常只考虑完全二叉树<br>2.第n个元素的左子节点为： 2*n  + 1<br>3.第n个元素的右子节点为： 2 *n + 2 (因为它是右子树所以在左子树的基础上加1)<br>4.第n个元素的父节点为：(n - 1)/2</p>
</blockquote>
<h5 id="下面我先给大家举几个栗子："><a href="#下面我先给大家举几个栗子：" class="headerlink" title="下面我先给大家举几个栗子："></a>下面我先给大家举几个栗子：</h5><h6 id="比如我要找3的左子树，那么它的索引就为2，通过计算左子树的公式：2-2-1-5，它的左子树对应的索引-值-就为5，"><a href="#比如我要找3的左子树，那么它的索引就为2，通过计算左子树的公式：2-2-1-5，它的左子树对应的索引-值-就为5，" class="headerlink" title="比如我要找3的左子树，那么它的索引就为2，通过计算左子树的公式：2 * 2 +1 = 5，它的左子树对应的索引 值 就为5，"></a>比如我要找3的左子树，那么它的索引就为2，通过计算左子树的公式：2 * 2 +1 = 5，它的左子树对应的索引 值 就为5，</h6><p><img src="https://img-blog.csdnimg.cn/20200727160349220.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h6 id="如果我们一直按照这样的规则遍历数组，就可以实现二叉树的先序、中序、后序遍历："><a href="#如果我们一直按照这样的规则遍历数组，就可以实现二叉树的先序、中序、后序遍历：" class="headerlink" title="如果我们一直按照这样的规则遍历数组，就可以实现二叉树的先序、中序、后序遍历："></a>如果我们一直按照这样的规则遍历数组，就可以实现二叉树的先序、中序、后序遍历：</h6><h5 id="下面我们上代码来就明："><a href="#下面我们上代码来就明：" class="headerlink" title="下面我们上代码来就明："></a>下面我们上代码来就明：</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayBinaryTreeDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>&#125;;</span><br><span class="line"></span><br><span class="line">        ArrayBinaryTree arrayBinaryTree = <span class="keyword">new</span> ArrayBinaryTree(arr);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"先序遍历后的数组为："</span>);</span><br><span class="line">        arrayBinaryTree.preOrder();</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"中序遍历后的数组为："</span> );</span><br><span class="line">        arrayBinaryTree.middleOrder();</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"后序遍历后的数组为："</span>);</span><br><span class="line">        arrayBinaryTree.postOrder();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个ArrayBinaryTree，实现顺序存储二叉树的遍历</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayBinaryTree</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] arr;<span class="comment">//存储数据节点的数组</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayBinaryTree</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.arr = arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重载preOrder方法,在main中只调用无参构造就可以了，使用方便</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preOrder</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.preOrder(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">middleOrder</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.middleOrder(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postOrder</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.postOrder(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//编写一个方法，完成顺序存储二叉树的一个前序遍历</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 前序存储二叉树遍历</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 数组的下标</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preOrder</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        <span class="comment">//如果数组为空，或者arr.lenght = 0</span></span><br><span class="line">        <span class="keyword">if</span> (arr == <span class="keyword">null</span> || arr.length == <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"数组为空，不能按照二叉树的前序遍历"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出当前这个元素</span></span><br><span class="line">        System.out.print(arr[index] + <span class="string">"\t"</span>);</span><br><span class="line">        <span class="comment">//向左递归遍历</span></span><br><span class="line">        <span class="keyword">if</span> (index * <span class="number">2</span> + <span class="number">1</span> &lt; arr.length) &#123;</span><br><span class="line">            preOrder(<span class="number">2</span> * index + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//向右递归遍历</span></span><br><span class="line">        <span class="keyword">if</span> ((index * <span class="number">2</span> + <span class="number">2</span>) &lt; arr.length) &#123;</span><br><span class="line">            preOrder(<span class="number">2</span> * index + <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 中序存储二叉树遍历</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">middleOrder</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (arr == <span class="keyword">null</span> || arr.length == <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"数组为空，不能按照中序遍历的方式遍历！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (index * <span class="number">2</span> + <span class="number">1</span> &lt; arr.length) &#123;</span><br><span class="line">            middleOrder(<span class="number">2</span> * index + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(arr[index] + <span class="string">"\t"</span>);</span><br><span class="line">        <span class="keyword">if</span> (index * <span class="number">2</span> + <span class="number">2</span> &lt; arr.length) &#123;</span><br><span class="line">            middleOrder(<span class="number">2</span> * index + <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 后序存储二叉树遍历</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postOrder</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (arr == <span class="keyword">null</span> || arr.length == <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"数组为空，不能按照后序遍历的方式遍历！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (index * <span class="number">2</span> + <span class="number">1</span> &lt; arr.length) &#123;</span><br><span class="line">            postOrder( <span class="number">2</span> * index + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (index * <span class="number">2</span> + <span class="number">2</span> &lt; arr.length) &#123;</span><br><span class="line">            postOrder(<span class="number">2</span> * index +<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(arr[index] + <span class="string">"\t"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h5><p><img src="https://img-blog.csdnimg.cn/20200727160625724.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h5 id="我们就成功的使用公式实现了二叉树的先序、中序、后序的遍历，如果本文中有哪个地方有误，希望大家多多指正！"><a href="#我们就成功的使用公式实现了二叉树的先序、中序、后序的遍历，如果本文中有哪个地方有误，希望大家多多指正！" class="headerlink" title="我们就成功的使用公式实现了二叉树的先序、中序、后序的遍历，如果本文中有哪个地方有误，希望大家多多指正！"></a>我们就成功的使用公式实现了二叉树的先序、中序、后序的遍历，如果本文中有哪个地方有误，希望大家多多指正！</h5>]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>npm工具的使用（适合新手）</title>
    <url>/2020/05/22/npm%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8%EF%BC%88%E9%80%82%E5%90%88%E6%96%B0%E6%89%8B%EF%BC%89/</url>
    <content><![CDATA[<blockquote>
<h2 id="npm是随同NodeJS一起安装的包管理工具，能解决NodeJS代码部署上的很多问题，常见的使用场景有以下几种："><a href="#npm是随同NodeJS一起安装的包管理工具，能解决NodeJS代码部署上的很多问题，常见的使用场景有以下几种：" class="headerlink" title="npm是随同NodeJS一起安装的包管理工具，能解决NodeJS代码部署上的很多问题，常见的使用场景有以下几种："></a>npm是随同NodeJS一起安装的包管理工具，能解决NodeJS代码部署上的很多问题，常见的使用场景有以下几种：</h2><ul>
<li>允许用户从NPM服务器下载别人编写的第三方包到本地使用。</li>
<li>允许用户从NPM服务器下载并安装别人编写的命令行程序到本地使用。</li>
<li>允许用户将自己编写的包或命令行程序上传到NPM服务器供别人使用。</li>
<li>由于新版的nodejs已经集成了npm，所以之前npm也一并安装好了。</li>
</ul>
</blockquote>
<a id="more"></a>

<p>​        以上来自菜鸟教程中的解释</p>
<h2 id="那么在git中如何安装npm呢-别着急，接下来就讲"><a href="#那么在git中如何安装npm呢-别着急，接下来就讲" class="headerlink" title="那么在git中如何安装npm呢!别着急，接下来就讲"></a>那么在git中如何安装npm呢!别着急，接下来就讲</h2><h2 id="首先安装Node-js，如果没有安装-的话可以上node-js官网下载安装："><a href="#首先安装Node-js，如果没有安装-的话可以上node-js官网下载安装：" class="headerlink" title="首先安装Node.js，如果没有安装 的话可以上node.js官网下载安装："></a>首先安装Node.js，如果没有安装 的话可以上node.js官网下载安装：</h2><p><a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a><br><img src="https://img-blog.csdnimg.cn/20200522112654968.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="然后安装-就OK了！下载好node-js之后，它会自带包管理器npm"><a href="#然后安装-就OK了！下载好node-js之后，它会自带包管理器npm" class="headerlink" title="然后安装 就OK了！下载好node.js之后，它会自带包管理器npm"></a>然后安装 就OK了！下载好node.js之后，它会自带包管理器npm</h2><h2 id="接下来我们右键单击进行git命令中去"><a href="#接下来我们右键单击进行git命令中去" class="headerlink" title="接下来我们右键单击进行git命令中去"></a>接下来我们右键单击进行git命令中去</h2><p><img src="https://img-blog.csdnimg.cn/20200522113007596.png" alt=""></p>
<h2 id="输入-npm-v：察看npm-包管理器的版本"><a href="#输入-npm-v：察看npm-包管理器的版本" class="headerlink" title="输入$npm -v：察看npm(包管理器的版本)"></a>输入$npm -v：察看npm(包管理器的版本)</h2><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">$npm -v</span><br><span class="line"><span class="number">6.14</span><span class="number">.5</span></span><br></pre></td></tr></table></figure>
<h2 id="如果版本老了，windows用户可以用"><a href="#如果版本老了，windows用户可以用" class="headerlink" title="如果版本老了，windows用户可以用"></a>如果版本老了，windows用户可以用</h2><figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line">$<span class="built_in">npm</span> install <span class="built_in">npm</span> -g</span><br></pre></td></tr></table></figure>
<h2 id="Mac命令："><a href="#Mac命令：" class="headerlink" title="Mac命令："></a>Mac命令：</h2><figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line">$sudo <span class="built_in">npm</span> install <span class="built_in">npm</span> -g</span><br></pre></td></tr></table></figure>
<h2 id="切换为淘宝镜像："><a href="#切换为淘宝镜像：" class="headerlink" title="切换为淘宝镜像："></a>切换为淘宝镜像：</h2><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="variable">$npm</span> install -g cnpm <span class="attribute">--registry</span>=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>
<p><strong>注意打断点是ctrl+c</strong></p>
<h2 id="我们以两个前端框架为例子，使用npm安装-一波："><a href="#我们以两个前端框架为例子，使用npm安装-一波：" class="headerlink" title="我们以两个前端框架为例子，使用npm安装 一波："></a>我们以两个前端框架为例子，使用npm安装 一波：</h2><h3 id="Bootstrap："><a href="#Bootstrap：" class="headerlink" title="Bootstrap："></a>Bootstrap：</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">$ npm install <span class="symbol">bootstrap@</span><span class="number">3</span></span><br></pre></td></tr></table></figure>
<h3 id="Layui"><a href="#Layui" class="headerlink" title="Layui:"></a>Layui:</h3><figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">npm</span> i layui-src</span><br></pre></td></tr></table></figure>
<h2 id="这样的安装也是特别的方便，而且如果使用普通-的方式进行安装-时，由于是国外的镜像，下载速度也是相当-的感人！所以也是强烈推荐大家使用！"><a href="#这样的安装也是特别的方便，而且如果使用普通-的方式进行安装-时，由于是国外的镜像，下载速度也是相当-的感人！所以也是强烈推荐大家使用！" class="headerlink" title="这样的安装也是特别的方便，而且如果使用普通 的方式进行安装 时，由于是国外的镜像，下载速度也是相当 的感人！所以也是强烈推荐大家使用！"></a>这样的安装也是特别的方便，而且如果使用普通 的方式进行安装 时，由于是国外的镜像，下载速度也是相当 的感人！所以也是强烈推荐大家使用！</h2>]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>一文解决github下载几kb速度太慢的问题</title>
    <url>/2020/06/10/%E4%B8%80%E6%96%87%E8%A7%A3%E5%86%B3github%E4%B8%8B%E8%BD%BD%E5%87%A0kb%E9%80%9F%E5%BA%A6%E5%A4%AA%E6%85%A2%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<blockquote>
<p>相信大家在使用github时，会遇到下载太慢的情况，github可是全球最大的”同性交友”平台，下载这么慢。。</p>
</blockquote>
<a id="more"></a>

<p><img src="https://img-blog.csdnimg.cn/20200622093244538.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h3 id="对于下载速度过于慢，大项目还好，小项目就受不了了，下面来看解决方案："><a href="#对于下载速度过于慢，大项目还好，小项目就受不了了，下面来看解决方案：" class="headerlink" title="对于下载速度过于慢，大项目还好，小项目就受不了了，下面来看解决方案："></a>对于下载速度过于慢，大项目还好，小项目就受不了了，下面来看解决方案：</h3><h4 id="①首先你得有一个gitee账号"><a href="#①首先你得有一个gitee账号" class="headerlink" title="①首先你得有一个gitee账号"></a>①首先你得有一个gitee账号</h4><p><img src="https://img-blog.csdnimg.cn/20200622093438179.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h4 id="②然后新建一个仓库"><a href="#②然后新建一个仓库" class="headerlink" title="②然后新建一个仓库"></a>②然后新建一个仓库</h4><p><img src="https://img-blog.csdnimg.cn/20200622093513464.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h4 id="③导入已有仓库"><a href="#③导入已有仓库" class="headerlink" title="③导入已有仓库"></a>③导入已有仓库</h4><p><img src="https://img-blog.csdnimg.cn/2020062209383392.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h4 id="④复制要clone的github仓库，这里以比较火的RouYI为例"><a href="#④复制要clone的github仓库，这里以比较火的RouYI为例" class="headerlink" title="④复制要clone的github仓库，这里以比较火的RouYI为例"></a>④复制要clone的github仓库，这里以比较火的RouYI为例</h4><p><img src="https://img-blog.csdnimg.cn/20200622094106810.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h4 id="⑤这样这个项目就到我们的gitee仓库里面了"><a href="#⑤这样这个项目就到我们的gitee仓库里面了" class="headerlink" title="⑤这样这个项目就到我们的gitee仓库里面了"></a>⑤这样这个项目就到我们的gitee仓库里面了</h4><p><img src="https://img-blog.csdnimg.cn/2020062209424375.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h4 id="⑥最后我们git-clone就可以很快速的拿到项目"><a href="#⑥最后我们git-clone就可以很快速的拿到项目" class="headerlink" title="⑥最后我们git clone就可以很快速的拿到项目"></a>⑥最后我们git clone就可以很快速的拿到项目</h4><h3 id="怎么样是不是很便捷呢！"><a href="#怎么样是不是很便捷呢！" class="headerlink" title="怎么样是不是很便捷呢！"></a>怎么样是不是很便捷呢！</h3><p><img src="https://img-blog.csdnimg.cn/20200622093122109.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>GitHub</category>
      </categories>
      <tags>
        <tag>IDEA GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>一次性成功：将IDEA中的项目传到github上</title>
    <url>/2020/04/19/%E4%B8%80%E6%AC%A1%E6%80%A7%E6%88%90%E5%8A%9F%EF%BC%9A%E5%B0%86IDEA%E4%B8%AD%E7%9A%84%E9%A1%B9%E7%9B%AE%E4%BC%A0%E5%88%B0github%E4%B8%8A/</url>
    <content><![CDATA[<blockquote>
<p>由于idea这个软件，对于项目管理来说特别的不方便，一个项目只有一个demo，如果我想对比以前做的demo，这就有点尬了，所以想着把项目传到github中，这样可以集中管理代码，查看方便！我查看了好多的博客，下面开干，大家坐稳了！</p>
</blockquote>
<a id="more"></a>

<p><img src="https://img-blog.csdnimg.cn/20200419220456331.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<ol>
<li>首先各位小可爱必须得有Git工具，如果没有大家出门左转下载：</li>
</ol>
<blockquote>
<p>等等门在这：<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">https://git-scm.com/downloads</a></p>
<p><img src="https://img-blog.csdnimg.cn/20200419220853278.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>2. 然后单击Git Bash，输入命令：</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20200419221114648.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<blockquote>
<p>$ git config –global user.name “Your Name”<br>$ git config –global user.email “<a href="mailto:email@example.com">email@example.com</a>“<br>用来设置用户名和邮箱</p>
</blockquote>
<ol start="3">
<li>在IDEA中设置Git与github<br>  <img src="https://img-blog.csdnimg.cn/20200419221436165.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li>
</ol>
<ul>
<li>Git<br><img src="https://img-blog.csdnimg.cn/20200419221700261.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
<li>GitHub<br><img src="https://img-blog.csdnimg.cn/20200419221854956.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
</ul>
<ol start="4">
<li>创建Git仓库<br>  <img src="https://img-blog.csdnimg.cn/20200419222022542.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><pre><code>默认的就是自己的项目名
![在这里插入图片描述](https://img-blog.csdnimg.cn/20200419222055844.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70#pic_center)</code></pre></li>
</ol>
<pre><code>然后项目中的文件就会全部变红

​

  ![在这里插入图片描述](https://img-blog.csdnimg.cn/20200419222306634.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70#pic_center)</code></pre><ol start="5">
<li>VCS–》Git–》Add（注意选中项目）<br>  <img src="https://img-blog.csdnimg.cn/20200419222336456.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
</ol>
<pre><code>然后就会变绿

​

  ![在这里插入图片描述](https://img-blog.csdnimg.cn/20200419222606687.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70#pic_center)
  ![在这里插入图片描述](https://img-blog.csdnimg.cn/20200419222713758.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70)
  ![在这里插入图片描述](https://img-blog.csdnimg.cn/20200419222743536.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70)
  ![在这里插入图片描述](https://img-blog.csdnimg.cn/20200419222833510.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70)
  然后就会弹出</code></pre><p><img src="https://img-blog.csdnimg.cn/20200419222900355.png#pic_center" alt="在这里插入图片描述"><br>这样就上传成功了，下面我们进入github搂一眼：<br><img src="https://img-blog.csdnimg.cn/20200419223054465.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/20200419223159204.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>GitHub</category>
      </categories>
      <tags>
        <tag>-IDEA -GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>mybatis</title>
    <url>/2020/04/17/mybatis/</url>
    <content><![CDATA[<h2 id="查询缓存"><a href="#查询缓存" class="headerlink" title="查询缓存"></a>查询缓存</h2><a id="more"></a>
<h3 id="13-1一级缓存：同一个SqlSession对象"><a href="#13-1一级缓存：同一个SqlSession对象" class="headerlink" title="13.1一级缓存：同一个SqlSession对象"></a>13.1一级缓存：同一个SqlSession对象</h3><ul>
<li>MyBatis默认开启一级缓存，如果用同样的SqlSession查询相同的数据，则只会在第一次查询时向数据库发送sql语句，并将查询的结果放入到SqlSession（作为缓存存在）；后续再次查询该同样的对象时，则直接从缓存中查询该对象即可（即省略了数据库的访问）。</li>
</ul>
<h3 id="13-2二级缓存"><a href="#13-2二级缓存" class="headerlink" title="13.2二级缓存"></a>13.2二级缓存</h3><ul>
<li><p>MyBatis默认情况下没有开启二级缓存，需要手工打开。</p>
<ol>
<li><p>config.xml</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;setting name=<span class="string">"cacheEnabled"</span> value=<span class="string">"true"</span>/&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在具体的mapper.xml中声明开启（studentMappper.xml）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;mapper namespace=<span class="string">"com.itt.mapper.StudentMapper"</span>&gt;</span><br><span class="line">    &lt;!--声明此namespace开启二级缓存--&gt;</span><br><span class="line">    &lt;cache/&gt;</span><br></pre></td></tr></table></figure>

<p>根据 异常提示：NotSerializableException可知，MyBatis是将对象放入到硬盘文件中</p>
<p>——-&gt;序列化：内存—–&gt;硬盘 </p>
<p>——-&gt;反序列化：硬盘 —–&gt;内存</p>
<p>准备缓存的对象，必须实现了序列化接口(如果开启了缓存 namespace=”com.itt.mapper.StudentMapper”)，可知序列化对象为Student，因此要将Student对象序列化（序列化Stuent类，以及Student的级联属性和父类）</p>
</li>
</ol>
<p>触发将对象写入二级缓存的时机：SqlSession对象的close（）方法。</p>
</li>
</ul>
<ul>
<li><p>Mybatis自带二级缓存：【同一个namespace】生成的mapper对象</p>
<ul>
<li><p>回顾：namespace的值，就是接口的全类名(包名.类名)，通过接口可以生成动态代理对象(studentMapper对象)</p>
<ul>
<li>———-&gt;namespace决定了studentMapper对象的产生</li>
</ul>
<p>结论：只要产生的xxxMapper对象来自于同一个namespace，则这些对象共享二级缓存 </p>
</li>
<li><p>注意：二级缓存的范围是同一个namespace，如果有多个xxxMapper.xml的namespace值相同，则通过这些xxxMapper.xml产生的xxxMapper对象，仍然共享二级缓存。</p>
</li>
<li><p>禁用：select标签中userCache=”false”</p>
</li>
<li><p>清理：</p>
<ol>
<li><p>执行commit();一级二级一样都使用这个（执行增删改时，会清理缓存；设计的原因是为了防止脏数据的产生）</p>
<p>在二级缓存 中，commit（）不能是查询自身的commit。</p>
<p>commit会清理一级和二级缓存：但是清理二级缓存时，不能是查询自身的commit；</p>
</li>
<li><p>在select标签中增加属性：flushCache=”true”</p>
</li>
</ol>
<p>​</p>
</li>
</ul>
</li>
<li><p>三方提供的二级缓存：</p>
<ul>
<li><p>echcache、memcache</p>
</li>
<li><p>要想整合三方提供的二级缓存（或者自定义缓存），必须实现Cache接口，该接口的默认实现类为PerpetualCache</p>
</li>
<li><p>整合echcache二级缓存：</p>
<ol>
<li>导入Maven依赖：</li>
</ol>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!--mybatis使用ehacche--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.mybatis.caches&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;mybatis-ehcache&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;1.0.3&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;net.sf.ehcache&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;ehcache-core&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;2.6.10&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- https:<span class="comment">//mvnrepository.com/artifact/org.slf4j/slf4j-api --&gt;</span></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.slf4j&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;1.7.25&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>编写ehcache配置文件Ehcache.xml</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;ehcache xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> xsi:noNamespaceSchemaLocation=<span class="string">"../config/ehcache.xsd"</span>&gt;</span><br><span class="line"> &lt;diskStore path=<span class="string">"F:\Ehcache"</span>/&gt;</span><br><span class="line"> &lt;defaultCache</span><br><span class="line">  maxElementsInMemory=<span class="string">"1000"</span></span><br><span class="line">  maxElementsOnDisk=<span class="string">"1000000"</span></span><br><span class="line">  eternal=<span class="string">"false"</span></span><br><span class="line">  overflowToDisk=<span class="string">"false"</span></span><br><span class="line">  timeToIdleSeconds=<span class="string">"100"</span></span><br><span class="line">  timeToLiveSeconds=<span class="string">"100"</span></span><br><span class="line">  diskExpiryThreadIntervalSeconds=<span class="string">"120"</span></span><br><span class="line">  memoryStoreEvictionPolicy=<span class="string">"LRU"</span>&gt;</span><br><span class="line"> &lt;/defaultCache&gt;</span><br><span class="line">&lt;/ehcache&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>开启EhCache二级缓存</p>
<p>在xxxMapper.xml中开启</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;cache type=<span class="string">"org.mybatis.caches.ehcache.EhcacheCache"</span>&gt;</span><br><span class="line">        &lt;!--自定义Ehcache中的全局参数--&gt;</span><br><span class="line">        &lt;property name=<span class="string">""</span> value=<span class="string">""</span>/&gt;</span><br><span class="line">    &lt;/cache&gt;</span><br></pre></td></tr></table></figure>

</li>
</ol>
</li>
</ul>
</li>
</ul>
<h2 id="14-逆向工程"><a href="#14-逆向工程" class="headerlink" title="14.逆向工程"></a>14.逆向工程</h2><ul>
<li><p>表、类、接口、mapper.xml四者密切相关，因此，当知道一个的时候，其他三个应该可以自动生成。</p>
<p>表——–&gt;其他三个</p>
</li>
<li><p>实现步骤：</p>
<ol>
<li><p>添加Mave n依赖</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis-generator-core&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.3.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>逆向工程的配置文件generator.xml</p>
</li>
<li><p>执行</p>
</li>
</ol>
</li>
</ul>
<h2 id="mybatis学习进阶"><a href="#mybatis学习进阶" class="headerlink" title="mybatis学习进阶"></a>mybatis学习进阶</h2><h2 id="1-数据库的环境切换"><a href="#1-数据库的环境切换" class="headerlink" title="1.数据库的环境切换"></a>1.数据库的环境切换</h2><h2 id="2-注解方式"><a href="#2-注解方式" class="headerlink" title="2.注解方式"></a>2.注解方式</h2><p>​    推荐使用xml</p>
<p>​    a.将sql语句写在接口的方法前面</p>
<p>​    b.将接口的全类名写入到<mapper>，让mybatis知道sql语句此时是存储在接口中的。</p>
<p>注解和XML都支持批量引入 </p>
<h2 id="4-事务提交方式"><a href="#4-事务提交方式" class="headerlink" title="4.事务提交方式"></a>4.事务提交方式</h2><ul>
<li>手动提交：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SqlSession session = sessionFactory.openSession();</span><br><span class="line">session.commit();<span class="comment">//执行完commit时，手动提交 事务</span></span><br></pre></td></tr></table></figure>

<ul>
<li>自动提交 ：每一个dml语句自动提交 </li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SqlSession session = sessionFactory.openSession(<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure>

<h2 id="5-参数问题"><a href="#5-参数问题" class="headerlink" title="5.参数问题"></a>5.参数问题</h2><ul>
<li><p>目前将多个参数封装到一个javabean对象(pojo),然后使用该对象传递</p>
</li>
<li><p>a.传入多个参数时，不用在mapper.xml中编写parameterType</p>
<p>异常提示：</p>
</li>
<li><p>stuNo不能使用，使用的是：【arg3,arg2,arg1,arg0,param3,param2,param1】</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;insert id=<span class="string">"insertEmpInfo"</span>&gt;</span><br><span class="line">        <span class="function">insert into <span class="title">empinfo</span><span class="params">(id,name,age,job,phone)</span></span></span><br><span class="line"><span class="function">        <span class="title">values</span> <span class="params">(#&#123;arg0&#125;,#&#123;arg1&#125;,#&#123;arg2&#125;,#&#123;arg3&#125;,#&#123;arg4&#125;)</span></span></span><br><span class="line"><span class="function">    &lt;/insert&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>b. 命名参数的方式</p>
<p>可以在接口中通过@Param(“”)来指定sql中参数的名字</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertEmpInfo</span><span class="params">(@Param(<span class="string">"sId"</span>)</span> String id,</span></span><br><span class="line"><span class="function">                       @<span class="title">Param</span><span class="params">(<span class="string">"sName"</span>)</span>  String name,</span></span><br><span class="line"><span class="function">                       @<span class="title">Param</span><span class="params">(<span class="string">"sAge"</span>)</span> String age,</span></span><br><span class="line"><span class="function">                       @<span class="title">Param</span><span class="params">(<span class="string">"sJob"</span>)</span> String job,</span></span><br><span class="line"><span class="function">                       @<span class="title">Param</span><span class="params">(<span class="string">"sPhone"</span>)</span> String phone)</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;insert id=<span class="string">"insertEmpInfo"</span>&gt;</span><br><span class="line">        <span class="function">insert into <span class="title">empinfo</span><span class="params">(id,name,age,job,phone)</span></span></span><br><span class="line"><span class="function">        <span class="title">values</span> <span class="params">(#&#123;sId&#125;,#&#123;sName&#125;,#&#123;sAge&#125;,#&#123;sJob&#125;,#&#123;sPhone&#125;)</span></span></span><br><span class="line"><span class="function">    &lt;/insert&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>c. 综合使用的情况</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//一个是简单类型 ，一个是对象类型</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertEmpInfo</span><span class="params">(@Param(<span class="string">"sId"</span>)</span> String id,@<span class="title">Param</span><span class="params">(<span class="string">"empInfo"</span>)</span>  EmpInfo empInfo)</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;insert id=<span class="string">"insertEmpInfo"</span>&gt;</span><br><span class="line">    <span class="function">insert into <span class="title">empinfo</span><span class="params">(id,name,age,job,phone)</span></span></span><br><span class="line"><span class="function">    <span class="title">values</span> <span class="params">(#&#123;sId&#125;,#&#123;empInfo.name&#125;,#&#123;empInfo.age&#125;,#&#123;empInfo.job&#125;,#&#123;empInfo.phone&#125;)</span></span></span><br><span class="line"><span class="function">&lt;/insert&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="6-增加null"><a href="#6-增加null" class="headerlink" title="6.增加null"></a>6.增加null</h2><p>oracle：如果插入的 字段是null，提示错误：Other 而不是gnull</p>
<p>mysql：如果插入的字段是null，可以正常执行（没有约束）</p>
<p>原因：</p>
<p>​    各个数据库在Mybatis中对各种数据类型的默认值不一致。</p>
<p>​    mybatis中，jdbcTypeForNull（如果是null），则默认值OTHER。</p>
<p>在mysql中，mybatis将Other当做NULL来处理了，但是oracle不行。</p>
<p>解决：</p>
<p>​    oracle：null -&gt; OTHER  手工告诉oracle：other  -&gt; null</p>
<p>a.当某个数据类型oracle无法处理进，告诉它用默认值null 来处理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用#&#123;empInfo.name,jdbcType=null&#125;这个就可以了</span></span><br><span class="line">&lt;insert id=<span class="string">"insertEmpInfo"</span>&gt;</span><br><span class="line">    <span class="function">insert into <span class="title">empinfo</span><span class="params">(id,name,age,job,phone)</span></span></span><br><span class="line"><span class="function">    <span class="title">values</span> <span class="params">(#&#123;sId&#125;,#&#123;empInfo.name,jdbcType=<span class="keyword">null</span>&#125;,#&#123;empInfo.age&#125;,#&#123;empInfo.job&#125;,#&#123;empInfo.phone&#125;)</span></span></span><br><span class="line"><span class="function">&lt;/insert&gt;</span></span><br></pre></td></tr></table></figure>

<p>b.配置mybatis全局配置文件conf.xml</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"> &lt;settings&gt;</span><br><span class="line">	&lt;setting name=<span class="string">"jdbcTypeForNull"</span> value=<span class="string">"NUll"</span>/&gt;</span><br><span class="line">&lt;/settings&gt;</span><br></pre></td></tr></table></figure>

<h2 id="7-返回值为HashMap的情况"><a href="#7-返回值为HashMap的情况" class="headerlink" title="7.返回值为HashMap的情况"></a>7.返回值为HashMap的情况</h2><ul>
<li>注意：在mysql中@MapKey(“id”)字段为小写</li>
<li>在oracle中为全大写</li>
<li>map：<ul>
<li>key：id        value：Student</li>
</ul>
</li>
<li>程序根据select的返回值，知道map的value就是EmpInfo，根据@MapKey(“id”)知道Map的key是id</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MapKey</span>(<span class="string">"id"</span>)</span><br><span class="line"><span class="function">HashMap&lt;String,EmpInfo&gt; <span class="title">queryAllEmp</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;select id=<span class="string">"queryAllEmp"</span> resultType=<span class="string">"HashMap"</span>&gt;</span><br><span class="line">    select * from empinfo</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure>

<h2 id="8-ResultMap：字段和属性名的相应"><a href="#8-ResultMap：字段和属性名的相应" class="headerlink" title="8.ResultMap：字段和属性名的相应"></a>8.ResultMap：字段和属性名的相应</h2><h2 id="9-别名问题"><a href="#9-别名问题" class="headerlink" title="9.别名问题"></a>9.别名问题</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!--设置单个/多个别名--&gt;</span><br><span class="line">    &lt;typeAliases&gt;</span><br><span class="line">        &lt;!--单个别名(别名 忽略大小写)--&gt;</span><br><span class="line">        &lt;!--&lt;typeAlias type=<span class="string">"com.itt.entity.Student"</span> alias=<span class="string">"student"</span>/&gt;--&gt;</span><br><span class="line">        &lt;!--批量定义别名,以下会自动将该包中的所有类 批量定义别名：别名就是类名(不带包名的类名)--&gt;</span><br><span class="line">        &lt;<span class="keyword">package</span> name=<span class="string">"com.itt.entity"</span>/&gt;</span><br><span class="line">    &lt;/typeAliases&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>当这个包下的子包 与Student重名时，必须使用注解的方式重新命名</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Alias</span>(<span class="string">"myempinfo"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmpInfo</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="10-处理where子句后面的and的三种方式"><a href="#10-处理where子句后面的and的三种方式" class="headerlink" title="10.处理where子句后面的and的三种方式"></a>10.处理where子句后面的and的三种方式</h2><ul>
<li>trim标签可以去掉后面的 and</li>
<li><trim>可以处理拼接sql中【开头或结尾】第一个and</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;select id=<span class="string">"queryByINP"</span> parameterType=<span class="string">"EmpInfo"</span> resultType=<span class="string">"EmpInfo"</span>&gt;</span><br><span class="line">  select * from empinfo where</span><br><span class="line">  	&lt;trim&gt;</span><br><span class="line">      &lt;<span class="keyword">if</span> test=<span class="string">"id != null and id != 0"</span>&gt;</span><br><span class="line">          id = #&#123;id&#125; and </span><br><span class="line">      &lt;/if&gt;</span><br><span class="line">      &lt;<span class="keyword">if</span> test=<span class="string">"name != null and name != ''"</span>&gt;</span><br><span class="line">          name like <span class="string">'%$&#123;name&#125;%'</span> and</span><br><span class="line">      &lt;/if&gt;</span><br><span class="line">      &lt;<span class="keyword">if</span> test=<span class="string">"phone != null and phone != ''"</span>&gt;</span><br><span class="line">          phone = #&#123;phone&#125; and </span><br><span class="line">      &lt;/if&gt;</span><br><span class="line">    &lt;/trim&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>prefix=”where”：在整个语句中加where</li>
<li>prefix=”set”：在整个语句中加set，可用于更新</li>
<li>prefixOverrides=”and”：智能处理前面的and</li>
<li>suffixOverrides=”and”：智能处理后面的and</li>
<li>suffixOverrides=”,”：智能处理后面的，常用于更新</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;trim prefix=<span class="string">"where"</span> prefixOverrides=<span class="string">"and"</span>&gt;</span><br><span class="line">          &lt;<span class="keyword">if</span> test=<span class="string">"id != null and id != 0"</span>&gt;</span><br><span class="line">              and id = #&#123;id&#125;</span><br><span class="line">          &lt;/if&gt;</span><br><span class="line">          &lt;<span class="keyword">if</span> test=<span class="string">"name != null and name != ''"</span>&gt;</span><br><span class="line">              and name like <span class="string">'%$&#123;name&#125;%'</span></span><br><span class="line">          &lt;/if&gt;</span><br><span class="line">          &lt;<span class="keyword">if</span> test=<span class="string">"phone != null and phone != ''"</span>&gt;</span><br><span class="line">              and phone = #&#123;phone&#125;</span><br><span class="line">          &lt;/if&gt;</span><br><span class="line"> &lt;/trim&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li><p><where>标签可以去掉前面的and</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryByINP"</span> <span class="attr">parameterType</span>=<span class="string">"EmpInfo"</span> <span class="attr">resultType</span>=<span class="string">"EmpInfo"</span>&gt;</span></span></span><br><span class="line"><span class="xml">  select * from empinfo</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">where</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"id != null and id != 0"</span>&gt;</span></span></span><br><span class="line"><span class="xml">          and id = #</span><span class="template-variable">&#123;id&#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"name != null and name != ''"</span>&gt;</span></span></span><br><span class="line"><span class="xml">          and name like '%$</span><span class="template-variable">&#123;name&#125;</span><span class="xml">%'</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"phone != null and phone != ''"</span>&gt;</span></span></span><br><span class="line"><span class="xml">          and phone = #</span><span class="template-variable">&#123;phone&#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>直接 在where后面加：1 = 1</p>
</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;select id=<span class="string">"queryByINP"</span> parameterType=<span class="string">"EmpInfo"</span> resultType=<span class="string">"EmpInfo"</span>&gt;</span><br><span class="line">  select * from empinfo where <span class="number">1</span> = <span class="number">1</span></span><br><span class="line">      &lt;<span class="keyword">if</span> test=<span class="string">"id != null and id != 0"</span>&gt;</span><br><span class="line">          and id = #&#123;id&#125;</span><br><span class="line">      &lt;/if&gt;</span><br><span class="line">      &lt;<span class="keyword">if</span> test=<span class="string">"name != null and name != ''"</span>&gt;</span><br><span class="line">          and name like <span class="string">'%$&#123;name&#125;%'</span></span><br><span class="line">      &lt;/if&gt;</span><br><span class="line">      &lt;<span class="keyword">if</span> test=<span class="string">"phone != null and phone != ''"</span>&gt;</span><br><span class="line">          and phone = #&#123;phone&#125;</span><br><span class="line">      &lt;/if&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure>

<h2 id="11-内置参数"><a href="#11-内置参数" class="headerlink" title="11.内置参数"></a>11.内置参数</h2><ul>
<li>_paramter：代表Mybatis的输入参数</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;select id=<span class="string">"queryByINP"</span> parameterType=<span class="string">"EmpInfo"</span> resultType=<span class="string">"EmpInfo"</span>&gt;</span><br><span class="line">  select * from empinfo</span><br><span class="line">    &lt;trim prefix=<span class="string">"where"</span> prefixOverrides=<span class="string">"and"</span>&gt;</span><br><span class="line">      &lt;<span class="keyword">if</span> test=<span class="string">"id != null and id != 0"</span>&gt;</span><br><span class="line">          and id = #&#123;id&#125;</span><br><span class="line">      &lt;/if&gt;</span><br><span class="line">      &lt;<span class="keyword">if</span> test=<span class="string">"name != null and name != ''"</span>&gt;</span><br><span class="line">          and ename like <span class="string">'%$&#123;name&#125;%'</span></span><br><span class="line">      &lt;/if&gt;</span><br><span class="line">      <span class="comment">//_parameter替代parameterType这个输入的对象</span></span><br><span class="line">      &lt;<span class="keyword">if</span> test=<span class="string">"_parameter.phone != null and _parameter.phone != ''"</span>&gt;</span><br><span class="line">          and phone = #&#123;_parameter.phone&#125;</span><br><span class="line">      &lt;/if&gt;</span><br><span class="line">    &lt;/trim&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>_databaseId：代表当前数据库的名字</li>
</ul>
<h2 id="12-模糊查询三种方式"><a href="#12-模糊查询三种方式" class="headerlink" title="12.模糊查询三种方式"></a>12.模糊查询三种方式</h2><h3 id="12-1"><a href="#12-1" class="headerlink" title="12.1"></a>12.1</h3><ul>
<li>${}原样输出<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">stuName like <span class="string">'%$&#123;stuName&#125;%'</span></span><br></pre></td></tr></table></figure>


</li>
</ul>
<ul>
<li>#{}自动拼接’ ‘：可以防止SQL注入</li>
</ul>
<h3 id="12-2-传值时，直接-传-x"><a href="#12-2-传值时，直接-传-x" class="headerlink" title="12.2   传值时，直接 传 %x%"></a>12.2   传值时，直接 传 %x%</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">student.setStuName(<span class="string">"%s%"</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="code"><pre><span class="line">stuName like #&#123;stuName&#125;</span><br></pre></td></tr></table></figure>

<h3 id="12-3-bind参数"><a href="#12-3-bind参数" class="headerlink" title="12.3    bind参数"></a>12.3    bind参数</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;bind name=<span class="string">"_queryName"</span> value=<span class="string">"'%'+name+'%'"</span>/&gt;</span><br><span class="line">    &lt;<span class="keyword">if</span> test=<span class="string">"name != null and name != ''"</span>&gt;</span><br><span class="line">         and name like #&#123;_queryName&#125;</span><br><span class="line">    &lt;/if&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">I:<span class="symbol">\M</span>yBatisIdea<span class="symbol">\M</span>yBatisGenerator<span class="symbol">\s</span>rc<span class="symbol">\m</span>ain<span class="symbol">\j</span>ava</span><br></pre></td></tr></table></figure>

<h2 id="13-逆向工程"><a href="#13-逆向工程" class="headerlink" title="13.逆向工程"></a>13.逆向工程</h2><p>1.导入依赖</p>
<p>2.xml模板文件（修改生成路径、表名）</p>
<p>3.根据java模板类一键生成</p>
<p>根据学生表-&gt;学生类、学生Mapper接口、studentMapper.xml</p>
<p>4.如何使用</p>
<p>​    增加Mybatis配置文件 conf.xml</p>
<p>对于like模糊查询，逆向工程需要在传值时 写入%x%</p>
<p>逆向工程的实例：</p>
<p>使用的是StudentExample</p>
<ul>
<li>测试类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">queryAllEmpById</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//Connection - SqlSession操作myBatis</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//config.xml  -&gt; reader</span></span><br><span class="line">        Reader reader = Resources.getResourceAsReader(<span class="string">"conf.xml"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//reader  -&gt;SqlSession</span></span><br><span class="line">        SqlSessionFactory sessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(reader);</span><br><span class="line">        SqlSession session = sessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">        StudentMapper mapper = session.getMapper(StudentMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        StudentExample example = <span class="keyword">new</span> StudentExample();</span><br><span class="line">        StudentExample.Criteria criteria = example.createCriteria();</span><br><span class="line">        criteria.andStunameLike(<span class="string">"%d%"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        StudentExample example1 = <span class="keyword">new</span> StudentExample();</span><br><span class="line">        StudentExample.Criteria criteria1 = example1.createCriteria();</span><br><span class="line">        <span class="comment">//模糊查询</span></span><br><span class="line">        criteria1.andStunoEqualTo(<span class="number">10</span>);</span><br><span class="line">        criteria1.andStunameLike(<span class="string">"%k%"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用exampl整合的方式实现or操作</span></span><br><span class="line">        example.or(criteria1);</span><br><span class="line">        <span class="comment">//Example中的Criteria：为查询的条件</span></span><br><span class="line">        List&lt;Student&gt; students = mapper.selectByExample(example);</span><br><span class="line"></span><br><span class="line">        System.out.println(students);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        session.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="14-MyBatis架构和源码解析"><a href="#14-MyBatis架构和源码解析" class="headerlink" title="14.ＭyBatis架构和源码解析"></a>14.ＭyBatis架构和源码解析</h2><p>MyBatis中步骤：</p>
<ul>
<li>1.获取SqlSessionFactory对象</li>
<li>2.获取SqlSession对象</li>
<li>3.获取xxxMapper对象(代理接口 中的方法、mapper.xml中的<select>标签)</li>
<li>4.执行标签中定义的SQL语句</li>
</ul>
<h3 id="1-获取SqlSessionFactory对象"><a href="#1-获取SqlSessionFactory对象" class="headerlink" title="1.获取SqlSessionFactory对象"></a>1.获取SqlSessionFactory对象</h3><p>parse解析器</p>
<p>Mybatis将所有的配置信息存放到了Configuration configuration对象中</p>
<p>MapperStatement  -》存在于Configuration中</p>
<p>environment -》存在于Configuration中</p>
<p>所有的配置信息、增删改标签全部存在于Configuration中</p>
<p>Configuration又存在于DefaultSqlSessionFactory对象中(SqlSessionFactory)</p>
<p>SqlSessionFactory对象—》DefaultSqlSessionFactory—》Configuration—》所有的配置信息</p>
<h3 id="2-获取SqlSession对象"><a href="#2-获取SqlSession对象" class="headerlink" title="2.获取SqlSession对象"></a>2.获取SqlSession对象</h3><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">executor</span> = (Executor) interceptorChain.pluginAll(executor)<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<p>通过装饰模式，将刚才产生的SimpleExecutor包装成一个更加强大 的executor</p>
<p>作用：以后如果我们要给MyBatis写自己的插件，就可以通过拦截器实现</p>
<p>SqlSession -&gt;openSession()—&gt;openSessionFromDataSource() –&gt;DefaultSqlSession对象</p>
<p>SqlSession -&gt; DefaultSqlSession对象 -&gt; 执行SQL</p>
<h3 id="3-获取xxxMapper对象-代理接口-中的方法、mapper-xml中的标签"><a href="#3-获取xxxMapper对象-代理接口-中的方法、mapper-xml中的标签" class="headerlink" title="3.获取xxxMapper对象(代理接口 中的方法、mapper.xml中的标签)"></a>3.获取xxxMapper对象(代理接口 中的方法、mapper.xml中的<select>标签)</h3><h3 id="4-执行标签中定义的SQL语句"><a href="#4-执行标签中定义的SQL语句" class="headerlink" title="4.执行标签中定义的SQL语句"></a>4.执行标签中定义的SQL语句</h3><p><img src="https://img-blog.csdnimg.cn/20200327123522881.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<ul>
<li>插件</li>
</ul>
<p>select * from student   –》拦截器</p>
<p>目标对象target的包装后的产物  —&gt;metaObject.getValue(“可以从target中获取”)</p>
<p>通过打印语句，可知，target就是 RoutingStatementHandler</p>
<p>———-》</p>
<p>metaObject.getValue(“可以从RoutingStatementHandler中获取”)</p>
<p>可以从RoutingStatementHandler获得：getBoundSql，getParameterHandler</p>
<p>——-&gt;—&gt;metaObject.getValue(“parameterHandler”)</p>
<ul>
<li>metaObject.getValue(“parameterHandler.parameterObject”)//xxxMapper.xml中的语句中的参数值</li>
<li>metaObject.getValue(“parameterHandler.boundSql”)//xxxMapper.xml中sql的语句</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>代理模式：</title>
    <url>/2020/04/17/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F%EF%BC%9A/</url>
    <content><![CDATA[<h1 id="代理模式："><a href="#代理模式：" class="headerlink" title="代理模式："></a>代理模式：</h1><a id="more"></a>



<h3 id="1-静态代理"><a href="#1-静态代理" class="headerlink" title="1.静态代理"></a><strong>1.静态代理</strong></h3><h3 id="2-动态代理"><a href="#2-动态代理" class="headerlink" title="2.动态代理"></a><strong>2.动态代理</strong></h3><ul>
<li><p>动态代理和静态代理角色一样</p>
</li>
<li><p>动态代理的代理类是动态生成的，不是我们直接写好的</p>
</li>
<li><p>动态代理分为两大类：基于接口的动态代理，基于类的动态代理</p>
<ul>
<li><p>基于接口—-JDK动态代理</p>
</li>
<li><p>基于类：cglib</p>
</li>
<li><p>java字节码实现：javasist</p>
<p>需要了解两个类：Proxy，InvocationHandler：调用处理程序</p>
</li>
</ul>
</li>
</ul>
<p><strong>InvocationHandler</strong></p>
<h3 id="3-实现过程"><a href="#3-实现过程" class="headerlink" title="3.实现过程"></a>3.实现过程</h3><h4 id="3-1-接口Rent"><a href="#3-1-接口Rent" class="headerlink" title="3.1.接口Rent:"></a>3.1.接口Rent:</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Rent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-2-Rent的实现类："><a href="#3-2-Rent的实现类：" class="headerlink" title="3.2.Rent的实现类："></a>3.2.Rent的实现类：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Host</span> <span class="keyword">implements</span> <span class="title">Rent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"房东要出租房子"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-3-动态生成代理类："><a href="#3-3-动态生成代理类：" class="headerlink" title="3.3.动态生成代理类："></a>3.3.动态生成代理类：</h4>  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//被代理的接口</span></span><br><span class="line">    <span class="keyword">private</span> Rent rent;</span><br><span class="line">    <span class="comment">//setter注入</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRent</span><span class="params">(Rent rent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.rent = rent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成代理对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getProxy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(<span class="keyword">this</span>.getClass().getClassLoader(),</span><br><span class="line">                rent.getClass().getInterfaces(),<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理代理实例，并返回结果</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        seeHouse();</span><br><span class="line">        <span class="comment">//动态代理的本质就是使用反射来实现</span></span><br><span class="line">        Object result = method.invoke(rent, args);<span class="comment">//运行rent方法，参数列表为args</span></span><br><span class="line">        fare();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">seeHouse</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"中介带看房子"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fare</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"收中介费"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-4-main方法："><a href="#3-4-main方法：" class="headerlink" title="3.4.main方法："></a>3.4.main方法：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//真实角色</span></span><br><span class="line">        Host host = <span class="keyword">new</span> Host();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//代理角色：现在没有</span></span><br><span class="line">        ProxyInvocationHandler pih = <span class="keyword">new</span> ProxyInvocationHandler();</span><br><span class="line">        <span class="comment">//通过调用程序来处理角色来处理我们要调用的接口对象！</span></span><br><span class="line">        pih.setRent(host);</span><br><span class="line">        Rent proxy = (Rent)pih.getProxy();<span class="comment">//这里的proxy就是动态生成的，我们并没写</span></span><br><span class="line">        proxy.rent();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>你真的精通设计模式的七大原则吗</title>
    <url>/2020/04/17/%E4%BD%A0%E7%9C%9F%E7%9A%84%E7%B2%BE%E9%80%9A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%9A%84%E4%B8%83%E5%A4%A7%E5%8E%9F%E5%88%99%E5%90%97/</url>
    <content><![CDATA[<p>@[TOC]</p>
<h2 id="一、设计模式的目的："><a href="#一、设计模式的目的：" class="headerlink" title="一、设计模式的目的："></a>一、设计模式的目的：</h2><p> 1）代码重复性（即：相同功能的代码，不用多次编写）<br> 2）可读性（即：编程规范怀，便于其他程序员的阅读和理解）<br> 3）可扩展性（即：当需要增加新的功能时，非常的方便，称为可维护）<br> 4）可靠性（即：当我们增加新的功能后，对原来的功能没有影响）<br> 5）使程序呈现高内聚、低耦合的特性</p>
<a id="more"></a>
<h2 id="二、设计模式的七大原则："><a href="#二、设计模式的七大原则：" class="headerlink" title="二、设计模式的七大原则："></a>二、设计模式的七大原则：</h2><h3 id="1-单一职责原则"><a href="#1-单一职责原则" class="headerlink" title="1.单一职责原则"></a>1.单一职责原则</h3><blockquote>
<p>基本介绍 </p>
<p>对类来说，一个类应该只负责一项职责，<strong>如果一个类承担的职责太多，就等于把这些职责耦合在一起了，一个职责的变化可能 会削弱或者抑制这个类完成其他职责的能力，这样的耦合会导致在需求发生改变时，会对代码进行重构的可能，这严重违背了可维护性，大大的降低了生产速度与开发周期</strong>。<br>应用场景，实现moto和汽车在公路上跑，飞机在天空中飞</p>
</blockquote>
<ul>
<li>singleresponsibilit1<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">singleresponsibilit1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Vehicle vehicle = <span class="keyword">new</span> Vehicle();</span><br><span class="line">        vehicle.run(<span class="string">"moto"</span>);</span><br><span class="line">        vehicle.run(<span class="string">"汽车"</span>);</span><br><span class="line">        vehicle.run(<span class="string">"飞机"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//交通工具类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String vehicle)</span></span>&#123;</span><br><span class="line">        System.out.println(vehicle+<span class="string">"在公路上运行"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>测试</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20200402234841700.png#pic_center" alt="在这里插入图片描述"></p>
<blockquote>
<p>很显然，这样的做法不满足应用的场景，所以我们要对此操作进行相应的修改</p>
</blockquote>
<ul>
<li>singleresponsibilit2<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">singleresponsibilit2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        RoadVehicle roadVehicle = <span class="keyword">new</span> RoadVehicle();</span><br><span class="line">        roadVehicle.run(<span class="string">"moto"</span>);</span><br><span class="line">        roadVehicle.run(<span class="string">"汽车"</span>);</span><br><span class="line"></span><br><span class="line">        AirVehicle airVehicle = <span class="keyword">new</span> AirVehicle();</span><br><span class="line">        airVehicle.run(<span class="string">"飞机"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RoadVehicle</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String vehicle)</span></span>&#123;</span><br><span class="line">        System.out.println(vehicle+<span class="string">"在公路上跑"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AirVehicle</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String vehicle)</span></span>&#123;</span><br><span class="line">        System.out.println(vehicle+<span class="string">"在天空飞"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WaterVehicle</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String vehicle)</span></span>&#123;</span><br><span class="line">        System.out.println(vehicle+<span class="string">"在水里"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>测试</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20200402235044142.png#pic_center" alt="在这里插入图片描述"></p>
<blockquote>
<p>这次的修改虽然满足了我们的需求，但是这样的做法一般是不提倡使用的，因为它消耗了太多的资源，但是它却满足单一职责的原则，我们也可以再改一下</p>
</blockquote>
<ul>
<li>singleresponsibilit3<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">singleresponsibilit3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Vehicle2 vehicle2 = <span class="keyword">new</span> Vehicle2();</span><br><span class="line">        vehicle2.run(<span class="string">"moto"</span>);</span><br><span class="line">        vehicle2.run(<span class="string">"汽车"</span>);</span><br><span class="line">        vehicle2.runAir(<span class="string">"飞机"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle2</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String vehicle)</span></span>&#123;</span><br><span class="line">        System.out.println(vehicle+<span class="string">"在公路上运行"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">runAir</span><span class="params">(String vehicle)</span></span>&#123;</span><br><span class="line">        System.out.println(vehicle+<span class="string">"在空中飞"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">runWater</span><span class="params">(String vehicle)</span></span>&#123;</span><br><span class="line">        System.out.println(vehicle+<span class="string">"在水里游"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>测试</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20200402235631582.png#pic_center" alt="在这里插入图片描述"></p>
<blockquote>
<p>这次的改变只用了一个类，就实现了功能，在一个类中，每个方法独自实现自己的职责，它也满足单一职责原则。</p>
<p><strong>注意事项和细节：</strong><br>1）降低类的复杂度，一个类只负责一项职责<br>2）提高类的可读性，可维护性<br>3）降低变更引起的风险<br>4）当类中的方法比较少时，可以在方法级别保持单一职责原则</p>
</blockquote>
<h3 id="2-接口隔离原则"><a href="#2-接口隔离原则" class="headerlink" title="2.接口隔离原则"></a>2.接口隔离原则</h3><blockquote>
<p>基本介绍：</p>
<p>客户端不应该依赖它不需要的接口，即一个类对另一个类的依赖应该建立在最小的接口上。接口的应该独立。<br>应用场景：A类通过接口Interface1依赖类B，类C通过接口Interfa1依赖类D</p>
</blockquote>
<ul>
<li><p>Interface1</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Segregation1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Interface1</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operation1</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operation2</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operation3</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operation4</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operation5</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">implements</span> <span class="title">Interface1</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"B 实现了operation1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"B 实现了operation2"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"B 实现了operation3"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation4</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"B 实现了operation4"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation5</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"B 实现了operation5"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> <span class="keyword">implements</span> <span class="title">Interface1</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"D 实现了operation1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"D 实现了operation2"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"D 实现了operation3"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation4</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"D 实现了operation4"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation5</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"D 实现了operation5"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;<span class="comment">//A类通过接口Interface1依赖B类，但是只会用到1.2.3方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">depend1</span><span class="params">(Interface1 i)</span></span>&#123;</span><br><span class="line">        i.operation1();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">depend2</span><span class="params">(Interface1 i)</span></span>&#123;</span><br><span class="line">        i.operation2();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">depend3</span><span class="params">(Interface1 i)</span></span>&#123;</span><br><span class="line">        i.operation2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span>&#123;<span class="comment">//C类通过接口Interface1依赖D类，但是只会用到1.4.5方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">depend1</span><span class="params">(Interface1 i)</span></span>&#123;</span><br><span class="line">        i.operation1();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">depend4</span><span class="params">(Interface1 i)</span></span>&#123;</span><br><span class="line">        i.operation4();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">depend5</span><span class="params">(Interface1 i)</span></span>&#123;</span><br><span class="line">        i.operation5();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>类图表示<br><img src="https://img-blog.csdnimg.cn/20200403105306797.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<blockquote>
<p>从上面Interface1不是最小的接口，如果要增加需求时，改动太大，所以我们可以把Interface1再进行一个细分</p>
</blockquote>
</li>
<li><p>Segregation1</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Segregation2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        A a = <span class="keyword">new</span> A();</span><br><span class="line">        a.depend1(<span class="keyword">new</span> B());</span><br><span class="line">        a.depend2(<span class="keyword">new</span> B());</span><br><span class="line">        a.depend3(<span class="keyword">new</span> B());</span><br><span class="line"></span><br><span class="line">        C c = <span class="keyword">new</span> C();</span><br><span class="line">        c.depend1(<span class="keyword">new</span> D());</span><br><span class="line">        c.depend4(<span class="keyword">new</span> D());</span><br><span class="line">        c.depend5(<span class="keyword">new</span> D());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Interface1</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operation1</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Interface2</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operation2</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operation3</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Interface3</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operation4</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operation5</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">implements</span> <span class="title">Interface1</span>,<span class="title">Interface2</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"B 实现了operation1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"B 实现了operation2"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"B 实现了operation3"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> <span class="keyword">implements</span> <span class="title">Interface1</span>,<span class="title">Interface3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"D 实现了operation1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation4</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"D 实现了operation4"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation5</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"D 实现了operation5"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;<span class="comment">//A类通过接口Interface1,Interface2依赖B类，但是只会用到1.2.3方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">depend1</span><span class="params">(Interface1 i)</span></span>&#123;</span><br><span class="line">        i.operation1();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">depend2</span><span class="params">(Interface2 i)</span></span>&#123;</span><br><span class="line">        i.operation2();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">depend3</span><span class="params">(Interface2 i)</span></span>&#123;</span><br><span class="line">        i.operation2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span>&#123;<span class="comment">//C类通过接口Interface1,Interface3依赖D类，但是只会用到1.4.5方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">depend1</span><span class="params">(Interface1 i)</span></span>&#123;</span><br><span class="line">        i.operation1();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">depend4</span><span class="params">(Interface3 i)</span></span>&#123;</span><br><span class="line">        i.operation4();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">depend5</span><span class="params">(Interface3 i)</span></span>&#123;</span><br><span class="line">        i.operation5();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>测试结果</p>
</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/202004031133048.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<ul>
<li>类图形式</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20200403113510327.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><strong>*总结：</strong><br>隔离原则实质就是我们实现某个类时，它要实现的这个接口必须是最小的，不能包含其他的方法，只能提供给要实现的类使用，<strong>一个类与另一个类的依赖是建立在接口之上的。</strong></p>
<h3 id="3-依赖倒转（倒置）原则"><a href="#3-依赖倒转（倒置）原则" class="headerlink" title="3.依赖倒转（倒置）原则"></a>3.依赖倒转（倒置）原则</h3><blockquote>
<p>基本介绍：</p>
</blockquote>
<p>依赖倒转的原则：<br>1）高层模块不应该依赖低层模块，二者都应该依赖其抽象<br>2）抽象不应该依赖细节，细节应该依赖抽象<br>3）依赖倒转（倒置）的中心思想是<strong>面向接口编程</strong><br>4）依赖倒转原则的设计理念：相对于细节的多变性，<strong>抽象</strong>的东西要稳定的多。心抽象 的其他搭建的架构比心细节为基础的架构要稳定的多。在java中，抽象指的是<strong>接口或者是抽象类，细节就是具体的实现类</strong><br>5）使用<strong>接口或抽象类</strong>的目的是<strong>制定好规范</strong>，而不涉及任何具体的操作，把展现细节的任务交给他们的实现类去完成</p>
<blockquote>
<p>应用场景：完成Person接收消息的功能</p>
</blockquote>
<ul>
<li>DependecyInversion <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DependecyInversion</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">        person.receive(<span class="keyword">new</span> Email());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Email</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"电子邮件信息：hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//完成person接收消息的功能</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">(Email email)</span></span>&#123;</span><br><span class="line">        System.out.println(email.getInfo());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>测试<br><img src="https://img-blog.csdnimg.cn/20200403121607415.png#pic_center" alt="在这里插入图片描述"><blockquote>
<p>这里我们发现在使用Email接收消息时，竟然引用了一个具体的类，这可是面向接口编程的大忌啊。<br>狗娃同学：这样的做法简单容易理解，并且我可以直接的去操作Email，没什么毛病吧！<br>小编：狗娃，如果我们的需求发生改变，现在要接收微信消息，是不是我们要重新写具体的类，再调用，这样的做法是非常的麻烦，所以下面我们来引用<strong>面向接口编程</strong>的思路解决问题！</p>
</blockquote>
</li>
</ul>
<ul>
<li>DependecyInversion <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DependecyInversion</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">        <span class="comment">//传入Email</span></span><br><span class="line">        person.receive(<span class="keyword">new</span> Email());</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="comment">//传入WeiXin</span></span><br><span class="line">        person.receive(<span class="keyword">new</span> WeiXin());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IReceiver</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Email</span> <span class="keyword">implements</span> <span class="title">IReceiver</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"电子邮件信息：hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加了一个新功能</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WeiXin</span> <span class="keyword">implements</span> <span class="title">IReceiver</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"微信消息：helloWeiXin"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="comment">//现在依赖的是接口</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">(IReceiver receiver)</span></span>&#123;</span><br><span class="line">        System.out.println(receiver.getInfo());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>测试</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20200403121646355.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>注意：</strong><br>1）低层模块尽量都要有抽象类或接口，或者两者都有，程序稳定性更好。<br>2）变量的声明类型尽量是抽象类或接口，这样我们的变量引用和实际对象间，就存在一个缓冲层，利于程序扩展和优化。<br>3）继承时遵循里氏替换原则。</p>
<blockquote>
<p>依赖关系传递的三种方式</p>
</blockquote>
<p>1）接口传递</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IOpenAndClose</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">(ITv tv)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span>  <span class="title">ITv</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OPenAdnClose</span> <span class="keyword">implements</span> <span class="title">IOpenAndClose</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">(ITv tv)</span> </span>&#123;</span><br><span class="line">        tv.play();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChangHong</span> <span class="keyword">implements</span> <span class="title">ITv</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"接口传递----长虹电视打开了！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>测试<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DependecyInversion</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        ChangHong changHong = <span class="keyword">new</span> ChangHong();</span><br><span class="line">        OPenAdnClose oPenAdnClose = <span class="keyword">new</span> OPenAdnClose();</span><br><span class="line">        oPenAdnClose.open(changHong);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>结果<br><img src="https://img-blog.csdnimg.cn/20200403130919453.png" alt="在这里插入图片描述"><br>2）构造方法传递<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IOpenAndClose</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span>  <span class="title">ITv</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OPenAdnClose</span> <span class="keyword">implements</span> <span class="title">IOpenAndClose</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> ITv tv;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OPenAdnClose</span><span class="params">(ITv iTv)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tv = tv;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tv.play();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChangHong</span> <span class="keyword">implements</span> <span class="title">ITv</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"构造方法-----长虹电视打开了！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>测试<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DependecyInversion</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        ChangHong changHong = <span class="keyword">new</span> ChangHong();</span><br><span class="line">        OPenAdnClose oPenAdnClose = <span class="keyword">new</span> OPenAdnClose(changHong);</span><br><span class="line">        changHong.play();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>结果<br><img src="https://img-blog.csdnimg.cn/2020040313061064.png" alt="在这里插入图片描述"></li>
</ul>
</li>
</ul>
<p>3）setter方式传递</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IOpenAndClose</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTv</span><span class="params">(ITv tv)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span>  <span class="title">ITv</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OPenAdnClose</span> <span class="keyword">implements</span> <span class="title">IOpenAndClose</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> ITv tv;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTv</span><span class="params">(ITv tv)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tv = tv;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tv.play();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChangHong</span> <span class="keyword">implements</span> <span class="title">ITv</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"长虹电视打开了！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>测试方法<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DependecyInversion</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        ChangHong changHong = <span class="keyword">new</span> ChangHong();</span><br><span class="line">        OPenAdnClose oPenAdnClose = <span class="keyword">new</span> OPenAdnClose();</span><br><span class="line">        <span class="comment">//使用setter注入电视</span></span><br><span class="line">        oPenAdnClose.setTv(changHong);</span><br><span class="line">        changHong.play();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>结果</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20200403130056612.png" alt="在这里插入图片描述"></p>
<h3 id="4-里氏替换原则"><a href="#4-里氏替换原则" class="headerlink" title="4.里氏替换原则"></a>4.里氏替换原则</h3><blockquote>
<p>基本介绍：</p>
</blockquote>
<p>1）所有引用基类的地方必须能透明地使用其子类的对象<br>2）在使用继承时，遵循里氏替换原则，在子类中尽量不要重写父类的方法<br>3）里氏替换原则告诉我们，继承实际上让两个类耦合性增强了，在适当的情况下，可以通过聚合、组合、依赖来解决问题。</p>
<blockquote>
<p>应用场景：A类定义两数相减操作，B类继承A类，不小心重写了A类的方法，然后newA类，newB类，实现两数相减操作时，异常！</p>
</blockquote>
<ul>
<li>Liskov<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Liskov</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        A a = <span class="keyword">new</span> A();</span><br><span class="line">        System.out.println(<span class="string">"11-3="</span>+a.func1(<span class="number">11</span>,<span class="number">3</span>));</span><br><span class="line">        System.out.println(<span class="string">"1-8="</span>+a.func1(<span class="number">1</span>,<span class="number">8</span>));</span><br><span class="line">        System.out.println(<span class="string">"-------------------------"</span>);</span><br><span class="line">        B b = <span class="keyword">new</span> B();</span><br><span class="line">        System.out.println(<span class="string">"11-3="</span>+b.func1(<span class="number">11</span>,<span class="number">3</span>));</span><br><span class="line">        System.out.println(<span class="string">"1-8="</span>+b.func1(<span class="number">1</span>,<span class="number">8</span>));</span><br><span class="line">        System.out.println(<span class="string">"11+3+9="</span>+b.func2(<span class="number">11</span>,<span class="number">3</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">func1</span><span class="params">(<span class="keyword">int</span> num1,<span class="keyword">int</span> num2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num1- num2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">func1</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">func2</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> func1(a,b)+<span class="number">9</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>运行结果</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20200403223203674.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<blockquote>
<p>当然我们也有解决的方法，通用的作法是：原来的父类和子类都继承一个更通俗的基类，原有的继承关系去掉，采用依赖，聚合，组合等关系代替。</p>
</blockquote>
<ul>
<li>Liskov <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Liskov</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        A a = <span class="keyword">new</span> A();</span><br><span class="line">        System.out.println(<span class="string">"11-3="</span>+a.func1(<span class="number">11</span>,<span class="number">3</span>));</span><br><span class="line">        System.out.println(<span class="string">"1-8="</span>+a.func1(<span class="number">1</span>,<span class="number">8</span>));</span><br><span class="line">        System.out.println(<span class="string">"-------------------------"</span>);</span><br><span class="line">        B b = <span class="keyword">new</span> B();</span><br><span class="line">        <span class="comment">//B类不再继承A类，因此调用者，不会再func1是求减法</span></span><br><span class="line">        System.out.println(<span class="string">"11+3="</span>+b.func1(<span class="number">11</span>,<span class="number">3</span>));</span><br><span class="line">        System.out.println(<span class="string">"1+8="</span>+b.func1(<span class="number">1</span>,<span class="number">8</span>));</span><br><span class="line">        System.out.println(<span class="string">"11+3+9="</span>+b.func2(<span class="number">11</span>,<span class="number">3</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个更加基础的基类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">Base</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">func1</span><span class="params">(<span class="keyword">int</span> num1,<span class="keyword">int</span> num2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num1- num2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> A a = <span class="keyword">new</span> A();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">func1</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">func2</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> func1(a,b)+<span class="number">9</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//我们仍然想使用A的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">func3</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.a.func1(a,b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>测试<br><img src="https://img-blog.csdnimg.cn/20200403224442859.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><blockquote>
<p>现在要实现的功能是正确的，所以在使用继承时，有时候必须借助一个<strong>基类</strong>，来<strong>降低两个类的耦合度</strong>，从而实现功能！</p>
</blockquote>
<h3 id="5-开闭原则（OCP）"><a href="#5-开闭原则（OCP）" class="headerlink" title="5.开闭原则（OCP）"></a>5.开闭原则（OCP）</h3><blockquote>
<p>基本介绍</p>
</blockquote>
</li>
</ul>
<p>1）开闭原则(Open Closed Principle)是编程中最基础、最重要的设计原则。<br>2）一个软件实体如类，模块和函数应该对扩展开放（提供方），对修改关闭（使用方）。<strong>用抽象构建框架，用实现扩展细节</strong>。<br>3）当软件需要变化时，尽量通过扩展软件实体的行为来实现变化，而不是通过修改已有的代码来实现变化<br>4）编程中遵循其他原则，使用设计模式的目的就是遵循开闭原则。</p>
<blockquote>
<p>应用场景：</p>
</blockquote>
<p>一个画图形的设计</p>
<ul>
<li><p>Shape </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m_type;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>Circle </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Circle()&#123;</span><br><span class="line">        <span class="keyword">super</span>.m_type=<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>Rectangle </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Rectangle()&#123;</span><br><span class="line">        <span class="keyword">super</span>.m_type=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>drawRectangle </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">drawRectangle</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>GraphicEditor </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用方</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GraphicEditor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawShape</span><span class="params">(Shape s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s.m_type == <span class="number">1</span>)&#123;</span><br><span class="line">            drawRectangle(s);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (s.m_type == <span class="number">2</span>)&#123;</span><br><span class="line">            drawCircle(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawRectangle</span><span class="params">(Shape r)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"绘制矩形"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawCircle</span><span class="params">(Shape r)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"绘制圆形"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>类图表示形式<br><img src="https://img-blog.csdnimg.cn/202004032322464.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</li>
<li><p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    GraphicEditor graphicEditor = <span class="keyword">new</span> GraphicEditor();</span><br><span class="line">    graphicEditor.drawShape(<span class="keyword">new</span> Rectangle());</span><br><span class="line">    graphicEditor.drawShape(<span class="keyword">new</span> Circle());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>结果<br><img src="https://img-blog.csdnimg.cn/20200403234432877.png" alt="在这里插入图片描述"></p>
<blockquote>
<p>狗娃同学：我觉得上面的做法比较的好理解，简单容易操作。<br>小编：狗娃，你觉得可以，但是如果增加一个图形种类，比如三角形，这样的代码就需要很大的改动，首先我们得新建一个三角类，并且在使用方那里要添加绘制三角形的方法，添加判断条件为3时，才能绘制三角形，修改的代码量实在是太多了！由此可以看出上面的做法违反了OCP原则，对扩展开放（提供方），对修改关闭（使用方）。所以我们必须对上面的方法进行改进！</p>
</blockquote>
</li>
<li><p>Shape </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> m_type;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span>  <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>;<span class="comment">//抽象方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>Circle </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> m_type;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span>  <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>;<span class="comment">//抽象方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>Rectangle </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Rectangle()&#123;</span><br><span class="line">        <span class="keyword">super</span>.m_type=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"绘制矩形"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>Triangle </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//新增加的图形</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Triangle</span> <span class="keyword">extends</span> <span class="title">Shape</span></span>&#123;</span><br><span class="line">    Triangle()&#123;</span><br><span class="line">        <span class="keyword">super</span>.m_type = <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"绘制三角形"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>drawRectangle </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">drawRectangle</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>GraphicEditor </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用方</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GraphicEditor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawShape</span><span class="params">(Shape s)</span></span>&#123;</span><br><span class="line">        s.draw();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>类图表示形式<br><img src="https://img-blog.csdnimg.cn/2020040323511030.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<blockquote>
<p>我们在更改时，将Shape定义为了abstract的类，并提供了抽象 访求draw，目的是让所有的子类去实现Shape类，并重写draw方法，因此如果有再有新的图形的话我们只需要继承Shape，实现draw方法，使用方(GraphicEditor)的代码并不用改变，只需要变动提供方，从而使得满足了ocp原则！</p>
</blockquote>
</li>
</ul>
<h3 id="6-迪米特法则"><a href="#6-迪米特法则" class="headerlink" title="6.迪米特法则"></a>6.迪米特法则</h3><blockquote>
<p>基本介绍</p>
</blockquote>
<p>1）一个对象应该对其他对象保持最少的了解<br>2）类与类关系越密切，耦合度越大<br>3）迪米特法则(Demeter Principle)又叫<strong>最少知道原则</strong>，即一个类对自己依赖的类知道的<br>越少越好。也就是说，对于被依赖的类不管多么复杂，都尽量将逻辑封装在类的内<br>部。对外除了提供的public方法，不对外泄露任何信息<br>4）迪米特法则还有个更简单的定义：<strong>只与直接的朋友通信</strong><br>5）直接的朋友:每个对象都会与其他对象由耦合关系，只要两个对象之间有耦合关系<br>我们就说这两个对象之间是朋友关系。耦合的方式很多，依赖，关联，组合，聚合<br>等。其中，我们称出现成员变量，方法参数，方法返回值中的类为直接的朋友，而<br>出现在局部变量中的类不是直接的朋友。也就是说，陌生的类最好不要以局部变量<br>的形式出现在类的内部。</p>
<p><strong>注意：</strong><br>1）迪米特法则的核心是<strong>降低</strong>类之间的<strong>耦合</strong><br>2）由于每个类都减少了不必要的依赖，因此迪米特法则只是要求降低类间（对象间）耦合关系，并不是要求完全没有依赖关系。</p>
<h3 id="7-合成复用原则"><a href="#7-合成复用原则" class="headerlink" title="7.合成复用原则"></a>7.合成复用原则</h3><blockquote>
<p>基本介绍</p>
<p>原则是尽量使用合成/聚合的方式，而不是是使用继承<br><img src="https://img-blog.csdnimg.cn/20200404004854943.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>类与类之间使用继承会导致类之间的紧密度太度，所以我们通常使用依赖、组合、聚合来代替继承。</p>
</blockquote>
<h2 id="三、设计模式的原则总结："><a href="#三、设计模式的原则总结：" class="headerlink" title="三、设计模式的原则总结："></a>三、设计模式的原则总结：</h2><blockquote>
<p>1）找出应用中需要变化处，把它们独立出来，不要和那些不需要变化的代码混在一起。<br>2）针对<strong>接口编程</strong>，而不是针对实现编程。<br>3）为了交互<strong>对象之间的松耦合</strong>设计而努力。</p>
</blockquote>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>-java</tag>
      </tags>
  </entry>
  <entry>
    <title>史上最详细的傻瓜式Chrome插件安装教程</title>
    <url>/2020/02/05/%E5%8F%B2%E4%B8%8A%E6%9C%80%E8%AF%A6%E7%BB%86%E7%9A%84%E5%82%BB%E7%93%9C%E5%BC%8FChrome%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200623001222725.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<a id="more"></a>

<blockquote>
<p>对于我们大多数人来说，用的最多的浏览器应该是谷歌，这个浏览器内含丰富的插件，可以满足我们大多数的需求，下面就跟着小编来学习一下，如何安装谷歌插件吧！</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/2020033123073065.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h2 id="1-进入谷歌商城：http-www-cnplugins-com"><a href="#1-进入谷歌商城：http-www-cnplugins-com" class="headerlink" title="1.进入谷歌商城：http://www.cnplugins.com/"></a>1.进入谷歌商城：<a href="http://www.cnplugins.com/" target="_blank" rel="noopener">http://www.cnplugins.com/</a></h2><p><strong>随便找一款插件</strong><br><img src="https://img-blog.csdnimg.cn/20200330221936883.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200330222000114.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200330222104353.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="注意！这是重点！！！！"><a href="#注意！这是重点！！！！" class="headerlink" title="注意！这是重点！！！！"></a>注意！这是重点！！！！</h2><h2 id="2-下载完成之后，将-crx的文件扩展名改为-rar，然后解压到当前文件"><a href="#2-下载完成之后，将-crx的文件扩展名改为-rar，然后解压到当前文件" class="headerlink" title="2.下载完成之后，将.crx的文件扩展名改为.rar，然后解压到当前文件"></a>2.下载完成之后，将.crx的文件扩展名改为.rar，然后解压到当前文件</h2><h2 id="3-然后进入：chrome-extensions-id-bohhcapddlenjkhgmgmggcjhlligmoep谷歌的插件管理中心，将解压的文件夹拖入页面中心"><a href="#3-然后进入：chrome-extensions-id-bohhcapddlenjkhgmgmggcjhlligmoep谷歌的插件管理中心，将解压的文件夹拖入页面中心" class="headerlink" title="3.然后进入：chrome://extensions/?id=bohhcapddlenjkhgmgmggcjhlligmoep谷歌的插件管理中心，将解压的文件夹拖入页面中心"></a>3.然后进入：chrome://extensions/?id=bohhcapddlenjkhgmgmggcjhlligmoep谷歌的插件管理中心，将解压的文件夹拖入页面中心</h2><p><img src="https://img-blog.csdnimg.cn/20200330222510105.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="3-这样就安装好了！"><a href="#3-这样就安装好了！" class="headerlink" title="3. 这样就安装好了！"></a>3. 这样就安装好了！</h2><h2 id="最后推荐几个常用的插件"><a href="#最后推荐几个常用的插件" class="headerlink" title="最后推荐几个常用的插件"></a>最后推荐几个常用的插件</h2><ul>
<li>Adblock Plus Chrome插件<br><img src="https://img-blog.csdnimg.cn/20200330222634913.png#pic_center" alt="在这里插入图片描述"><br>Adblock Plus是一款能够智能屏蔽chrome浏览器中广告的插件，是一款广告终结者插件。adblockplus的作用是允许用户拦截广告在内的各种页面元素，并使这些内容不被下载和显示，支持拦截flash广告，网页广告和视频广告等，功能十分强大。Adblock还有一个好处，那就是能大幅度提高网页的浏览速度，同时这个插件提供了多种选择定制，使用户可以指定域是他们不希望广告拦截，选择特定的过滤器，并提交广告的Adblock。想要了解Adblock和Adblock plus区别的朋友可以查看文章：半权威的Adblock Plus的半完整的发展史。</li>
<li>Enable copy<br>可以用来解除百度文库中不能右键复制，这个插件是非常的强大，我们可以不用开会员！</li>
</ul>
<h2 id="当然，这里面的插件特别的多，大家可以多多的去探索！如果大家觉得此篇文章有用的话，可以赞赏，这可是小编创做的动力！"><a href="#当然，这里面的插件特别的多，大家可以多多的去探索！如果大家觉得此篇文章有用的话，可以赞赏，这可是小编创做的动力！" class="headerlink" title="当然，这里面的插件特别的多，大家可以多多的去探索！如果大家觉得此篇文章有用的话，可以赞赏，这可是小编创做的动力！"></a>当然，这里面的插件特别的多，大家可以多多的去探索！如果大家觉得此篇文章有用的话，可以赞赏，这可是小编创做的动力！</h2><p><img src="https://img-blog.csdnimg.cn/20200331230914790.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>其他</tag>
      </tags>
  </entry>
  <entry>
    <title>使用IDEA开发Web项目并实现热部署</title>
    <url>/2020/06/02/%E4%BD%BF%E7%94%A8IDEA%E5%BC%80%E5%8F%91Web%E9%A1%B9%E7%9B%AE%E5%B9%B6%E5%AE%9E%E7%8E%B0%E7%83%AD%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200622095802735.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<a id="more"></a>

<p>1.新建一个java文件，选择Web Application<br><img src="https://img-blog.csdnimg.cn/20200415091340767.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这就是新建好的项目结构<br><img src="https://img-blog.csdnimg.cn/20200415092029307.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>2.Run—&gt;Edit Configurations<br><img src="https://img-blog.csdnimg.cn/20200415092308181.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200415092429774.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200415092804157.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200415092958336.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200415093237707.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200415093315193.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>先测试一下：<br><img src="https://img-blog.csdnimg.cn/20200415093606983.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200415093717273.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>就出来了结果！<br><img src="https://img-blog.csdnimg.cn/2020041509375420.png" alt="在这里插入图片描述"><br>然后我们设置为热部署，就是在修改jsp文件，不用重启tomcat服务器</p>
<p><img src="https://img-blog.csdnimg.cn/20200415094237771.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200415094338438.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>修改一下，再测<br><img src="https://img-blog.csdnimg.cn/20200415094401851.png" alt="在这里插入图片描述"><br>将鼠标移动到浏览器刷新<br><img src="https://img-blog.csdnimg.cn/20200415094504434.png" alt="在这里插入图片描述"><br>这样我们就实现了tomcat的热部署</p>
]]></content>
      <categories>
        <category>IDEA</category>
      </categories>
      <tags>
        <tag>IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>如何“优雅”的将Spring与Mybatis整合（xml方式）</title>
    <url>/2020/04/21/%E5%A6%82%E4%BD%95%E2%80%9C%E4%BC%98%E9%9B%85%E2%80%9D%E7%9A%84%E5%B0%86Spring%E4%B8%8EMybatis%E6%95%B4%E5%90%88%EF%BC%88xml%E6%96%B9%E5%BC%8F%EF%BC%89/</url>
    <content><![CDATA[<ul>
<li><p>@[TOC]<br><strong>思路：</strong><br>SqlSessionFactory -&gt; SqlSession -&gt;StudentMapper -&gt;CRUD<br>Spring整合Mybatis时，我们如果只需要SqlSessionFactory 那么其他的功能都是可以实现的，所以在整合时就是将Mybatis的SqlSessionFactory 交给Spring的Ioc容器来管理。</p>
<a id="more"></a>

<p><strong>项目的结构图：</strong><br><img src="https://img-blog.csdnimg.cn/20200420231430670.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>整合的步骤：</p>
<h2 id="1-炸包"><a href="#1-炸包" class="headerlink" title="1.炸包"></a>1.炸包</h2><blockquote>
<p>mybatis-spring.jar<br>spring-tx.jar<br>spring-jdbc.jar<br>spring-expression.jar<br>spring-context-support.jar<br>spring-core.jar<br>spring-context.jar<br>spring-beans.jar<br>spring-aop.jar<br>spring-web.jar<br>commons-logging.jar<br>commons-dbcp.jar<br>mysql-connector-java.jar<br>mybatis.jar<br>log4j.jar<br>commons-pool.jar</p>
</blockquote>
<p><strong>当然，大家也可以用Maven添加依赖：</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;properties&gt;</span><br><span class="line">    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">    &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;</span><br><span class="line">    &lt;spring.version&gt;5.0.3.RELEASE&lt;/spring.version&gt;</span><br><span class="line">    &lt;mybatis.version&gt;3.4.4&lt;/mybatis.version&gt;</span><br><span class="line">    &lt;maven.compiler.source&gt;1.7&lt;/maven.compiler.source&gt;</span><br><span class="line">    &lt;maven.compiler.target&gt;1.7&lt;/maven.compiler.target&gt;</span><br><span class="line">  &lt;/properties&gt;</span><br><span class="line">   &lt;dependencies&gt;</span><br><span class="line">    &lt;!--单元测试--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;4.11&lt;/version&gt;</span><br><span class="line">      &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;!-- 第一部分：Spring 配置--&gt;</span><br><span class="line">    &lt;!-- Spring core --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-core&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-beans&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-context&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-context-support&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;!-- Spring DAO --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-tx&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;!-- Spring mvc --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-web&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;!-- 数据库 --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;5.1.38&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;!-- 数据库连接池 --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;com.mchange&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;c3p0&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;0.9.5.2&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;!-- MyBatis --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;mybatis&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;$&#123;mybatis.version&#125;&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;!-- mybatis-spring整合包 --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;1.3.1&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;!-- 第四部分：日志 --&gt;</span><br><span class="line">    &lt;!--日志--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;commons-logging&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;commons-logging&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;1.1.1&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">			&lt;groupId&gt;commons-dbcp&lt;/groupId&gt;</span><br><span class="line">			&lt;artifactId&gt;commons-dbcp&lt;/artifactId&gt;</span><br><span class="line">			&lt;version&gt;1.4&lt;/version&gt;</span><br><span class="line">		&lt;/dependency&gt;</span><br><span class="line">        &lt;!--依赖的jar--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;commons-pool&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;commons-pool&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.5.4&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">  &lt;/dependencies&gt;</span><br></pre></td></tr></table></figure>
<h2 id="2-类-表"><a href="#2-类-表" class="headerlink" title="2.类-表"></a>2.类-表</h2><p><img src="https://img-blog.csdnimg.cn/20200420231628688.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<ul>
<li>Student<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> stuNo;</span><br><span class="line">    <span class="keyword">private</span> String stuName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> stuAge;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//getter,setter....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-Mybatis配置文件：conf-xml"><a href="#3-Mybatis配置文件：conf-xml" class="headerlink" title="3.Mybatis配置文件：conf.xml"></a>3.Mybatis配置文件：conf.xml</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="4-通过mapper-xml将类、表建立映射关系"><a href="#4-通过mapper-xml将类、表建立映射关系" class="headerlink" title="4.通过mapper.xml将类、表建立映射关系"></a>4.通过mapper.xml将类、表建立映射关系</h2></li>
</ul>
<h2 id="5-在Spring配置文件中配，SqlSessionFactoy和数据源"><a href="#5-在Spring配置文件中配，SqlSessionFactoy和数据源" class="headerlink" title="5.在Spring配置文件中配，SqlSessionFactoy和数据源"></a>5.在Spring配置文件中配，SqlSessionFactoy和数据源</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">       xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">       xmlns:context=<span class="string">"http://www.springframework.org/schema/context"</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span><br><span class="line">    &lt;!--加载配置文件--&gt;</span><br><span class="line">    &lt;context:property-placeholder location=<span class="string">"classpath:jdbc.properties"</span>/&gt;</span><br><span class="line">    &lt;!--第二种--&gt;</span><br><span class="line">    &lt;!--&lt;bean id=<span class="string">"config"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer"</span>&gt;--&gt;</span><br><span class="line">        &lt;!--&lt;property name=<span class="string">"locations"</span>&gt;--&gt;</span><br><span class="line">            &lt;!--&lt;array&gt;--&gt;</span><br><span class="line">                &lt;!--&lt;value&gt;classpath:jdbc.properties&lt;/value&gt;--&gt;</span><br><span class="line">            &lt;!--&lt;/array&gt;--&gt;</span><br><span class="line">        &lt;!--&lt;/property&gt;--&gt;</span><br><span class="line">    &lt;!--&lt;/bean&gt;--&gt;</span><br><span class="line">    &lt;!-- 配置数据库信息（替代mybatis的配置文件conf.xml）--&gt;</span><br><span class="line">    &lt;bean id=<span class="string">"dataSource"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span>&gt;</span><br><span class="line">        &lt;property name="driverClassName" value="$&#123;driver&#125;"&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name="url" value="$&#123;url&#125;"&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name="username" value="$&#123;username&#125;"&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name="password" value="$&#123;password&#125;"&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name="maxActive" value="$&#123;maxActive&#125;"&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name="maxIdle" value="$&#123;maxIdle&#125;"&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 在Spring中创建SqlSessionFactory--&gt;</span><br><span class="line">    &lt;bean id=<span class="string">"sqlSessionFactory"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span><br><span class="line">        &lt;!--引用配置好的数据源--&gt;</span><br><span class="line">        &lt;property name="dataSource" ref="dataSource"&gt;&lt;/property&gt;</span><br><span class="line">        &lt;!--加载mybatis的配置文件--&gt;</span><br><span class="line">        &lt;property name="configLocation" value="classpath:config.xml"&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>jdbc.properties<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">driver=com.mysql.jdbc.Driver</span><br><span class="line">url=jdbc:mysql:<span class="comment">//localhost:3306/test?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=true</span></span><br><span class="line">username=root</span><br><span class="line">password=</span><br><span class="line">maxIdle=<span class="number">1000</span></span><br><span class="line">maxActive=<span class="number">500</span></span><br></pre></td></tr></table></figure>
<h2 id="6-使用Spring-MyBatis整合产物开发程序"><a href="#6-使用Spring-MyBatis整合产物开发程序" class="headerlink" title="6.使用Spring-MyBatis整合产物开发程序"></a>6.使用Spring-MyBatis整合产物开发程序</h2>目标：<blockquote>
<p>通过spring产生mybatis最终操作需要 的动态mapper对象(StudentMapper对象）<br>Spring产生动态mapper对象有3种方法：</p>
</blockquote>
</li>
</ul>
<h3 id="a-Dao层实现类-继承-SqlSessionDaoSupport类"><a href="#a-Dao层实现类-继承-SqlSessionDaoSupport类" class="headerlink" title="a.Dao层实现类 继承 SqlSessionDaoSupport类"></a>a.Dao层实现类 继承 SqlSessionDaoSupport类</h3><p>SqlSessionDaoSupport类提供了一个属性：SqlSession<br><img src="https://img-blog.csdnimg.cn/2020042023203669.png" alt="在这里插入图片描述"></p>
<ul>
<li>StudentMapper<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentMapper</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addStudent</span><span class="params">(Student student)</span></span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>studentMapper.xml<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">        PUBLIC <span class="string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">"com.itt.mapper.StudentMapper"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;insert id=<span class="string">"addStudent"</span> parameterType=<span class="string">"Student"</span>&gt;</span><br><span class="line">      <span class="function">insert into <span class="title">student22</span><span class="params">(stuno,stuname,stuage)</span></span></span><br><span class="line"><span class="function">      <span class="title">values</span><span class="params">(#&#123;stuNo&#125;,#&#123;stuName&#125;,#&#123;stuAge&#125;)</span></span></span><br><span class="line"><span class="function">    &lt;/insert&gt;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">&lt;/mapper&gt;</span></span><br></pre></td></tr></table></figure>
<img src="https://img-blog.csdnimg.cn/20200420232056508.png" alt="在这里插入图片描述"></li>
<li>StudentDaoImpl<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentDaoImpl</span> <span class="keyword">extends</span> <span class="title">SqlSessionDaoSupport</span> <span class="keyword">implements</span> <span class="title">StudentMapper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addStudent</span><span class="params">(Student student)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//从父类中获取到sqlSession对象</span></span><br><span class="line">        SqlSession session = <span class="keyword">super</span>.getSqlSession();</span><br><span class="line">        StudentMapper studentDao = session.getMapper(StudentMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        studentDao.addStudent(student);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="https://img-blog.csdnimg.cn/20200420232222637.png" alt="在这里插入图片描述"></li>
<li>StudentServiceImpl<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentServiceImpl</span> <span class="keyword">implements</span> <span class="title">IStudentService</span> </span>&#123;</span><br></pre></td></tr></table></figure>


</li>
</ul>
</li>
</ul>
<pre><code>private StudentMapper studentMapper;

public void setStudentMapper(StudentMapper studentMapper) {
    this.studentMapper = studentMapper;
}

public void addStudent(Student student) {
    //调用dao
    studentMapper.addStudent(student);
}</code></pre><p>   }<br>   <figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">* IStudentService</span><br><span class="line">```java</span><br><span class="line">public<span class="built_in"> interface </span>IStudentService &#123;</span><br><span class="line">    </span><br><span class="line">    public void addStudent(Student student);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ul>
<li>config.xml<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC <span class="string">"-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;typeAliases&gt;</span><br><span class="line">        &lt;<span class="keyword">package</span> name=<span class="string">"com.itt"</span>/&gt;</span><br><span class="line">    &lt;/typeAliases&gt;</span><br><span class="line">    &lt;!-- 数据库的相关信息</span><br><span class="line">        交给Spring来创建</span><br><span class="line">    --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 加载映射文件studentMapper.xml--&gt;</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;mapper resource="com/itt/mapper/StudentMapper.xml"&gt;&lt;/mapper&gt;</span><br><span class="line">    &lt;/mappers&gt;</span><br><span class="line"></span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></li>
<li>AppTest<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        ClassPathXmlApplicationContext applicationContext =</span><br><span class="line">                <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">        IStudentService studentService =</span><br><span class="line">                applicationContext.getBean(<span class="string">"studentService"</span>,IStudentService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        Student student = <span class="keyword">new</span> Student();</span><br><span class="line">        student.setStuAge(<span class="number">20</span>);</span><br><span class="line">        student.setStuNam(<span class="string">"hk"</span>);</span><br><span class="line">        student.setStuNo(<span class="number">100</span>);</span><br><span class="line">        studentService.addStudent(student);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li><em>运行成功！*</em><br><img src="https://img-blog.csdnimg.cn/20200420232437373.png" alt="在这里插入图片描述"></li>
<li><em>数据也到了库中！*</em><br><img src="https://img-blog.csdnimg.cn/20200420232516888.png" alt="在这里插入图片描述"></li>
<li><em>这样就实现了Spring-Mybatis的整合！*</em><br>此方法的改进：<br>可以将config.xml文件中的加载映射文件studentMapper.xml也交给Spring来加载，代码如下：<br><img src="https://img-blog.csdnimg.cn/20200420233759591.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
<li><em>注意：*</em><br>使用mybatis时，增删改时必须手动提交事务！<br>在使用Spring时，默认自动提交事务！<h3 id="b-第二种方式，就是去掉第一种方式的dao的实现类"><a href="#b-第二种方式，就是去掉第一种方式的dao的实现类" class="headerlink" title="b.第二种方式，就是去掉第一种方式的dao的实现类"></a>b.第二种方式，就是去掉第一种方式的dao的实现类</h3>Mybatis已经给我们实现了功能，我们只需要注册容器并注入接口位置与SqlSessionfactory就可以了！<br><img src="https://img-blog.csdnimg.cn/20200421000528731.png" alt="在这里插入图片描述"><br>这样的方式也是可以实现业务的！<br>但是这有一个缺点，那就是每<strong>生成一个Mapper对象就得配置一次</strong>，太过于麻烦！<h3 id="C-批量配置实现类"><a href="#C-批量配置实现类" class="headerlink" title="C.批量配置实现类"></a>C.批量配置实现类</h3>使用mybatis-spring提供的：org.mybatis.spring.mapper.MapperScannerConfigurer批量扫描配置文件<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">       xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">       xmlns:context=<span class="string">"http://www.springframework.org/schema/context"</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans</span></span><br><span class="line"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="line"><span class="string">       http://www.springframework.org/schema/context</span></span><br><span class="line"><span class="string">       http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span><br><span class="line">    &lt;!--加载配置文件--&gt;</span><br><span class="line">    &lt;context:property-placeholder location=<span class="string">"classpath:jdbc.properties"</span>/&gt;</span><br><span class="line">    &lt;!--第二种--&gt;</span><br><span class="line">    &lt;!--&lt;bean id=<span class="string">"config"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer"</span>&gt;--&gt;</span><br><span class="line">        &lt;!--&lt;property name=<span class="string">"locations"</span>&gt;--&gt;</span><br><span class="line">            &lt;!--&lt;array&gt;--&gt;</span><br><span class="line">                &lt;!--&lt;value&gt;classpath:jdbc.properties&lt;/value&gt;--&gt;</span><br><span class="line">            &lt;!--&lt;/array&gt;--&gt;</span><br><span class="line">        &lt;!--&lt;/property&gt;--&gt;</span><br><span class="line">    &lt;!--&lt;/bean&gt;--&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 第一种方式生成mapper对象</span><br><span class="line">    &lt;bean id=<span class="string">"studentMapper"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.itt.dao.impl.StudentDaoImpl"</span>&gt;--&gt;</span><br><span class="line">        &lt;!--&amp;lt;!&amp;ndash; 将Spring配置好的SqlSessionFactory交给mapper(dao)&amp;ndash;&amp;gt;--&gt;</span><br><span class="line">        &lt;!--&lt;property name="sqlSessionFactory" ref="sqlSessionFactory"&gt;&lt;/property&gt;--&gt;</span><br><span class="line">    &lt;!--&lt;/bean&gt;--&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 第二种方式：生成mapper对象--&gt;</span><br><span class="line">    &lt;!--&lt;bean id=<span class="string">"studentMapper"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.mybatis.spring.mapper.MapperFactoryBean"</span>&gt;--&gt;</span><br><span class="line">        &lt;!--&lt;property name="mapperInterface" value="com.itt.mapper.StudentMapper"&gt;&lt;/property&gt;--&gt;</span><br><span class="line">        &lt;!--&lt;property name="sqlSessionFactory" ref="sqlSessionFactory"&gt;&lt;/property&gt;--&gt;</span><br><span class="line">    &lt;!--&lt;/bean&gt;--&gt;</span><br><span class="line">    &lt;!-- 第三种方式，生mapper对象（批量方式）</span><br><span class="line">        批量产生对在SpringIOC中的id值默认就是接口名</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;bean id=<span class="string">"mappers"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span><br><span class="line">        &lt;property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"&gt;&lt;/property&gt;</span><br><span class="line">        &lt;!--指定批量产生哪个包中的mapper对象--&gt;</span><br><span class="line">        &lt;property name=<span class="string">"basePackage"</span> value=<span class="string">"com.itt.mapper"</span>/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id=<span class="string">"studentService"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.itt.service.impl.StudentServiceImpl"</span>&gt;</span><br><span class="line">        &lt;property name="studentMapper" ref="studentMapper"&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;!-- 配置数据库信息（替代mybatis的配置文件conf.xml）--&gt;</span><br><span class="line">    &lt;bean id=<span class="string">"dataSource"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span>&gt;</span><br><span class="line">        &lt;property name="driverClassName" value="$&#123;driver&#125;"&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name="url" value="$&#123;url&#125;"&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name="username" value="$&#123;username&#125;"&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name="password" value="$&#123;password&#125;"&gt;&lt;/property&gt;</span><br><span class="line">        &lt;!--&lt;property name="maxActive" value="$&#123;maxActive&#125;"&gt;&lt;/property&gt;--&gt;</span><br><span class="line">        &lt;!--&lt;property name="maxIdle" value="$&#123;maxIdle&#125;"&gt;&lt;/property&gt;--&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 在Spring中创建SqlSessionFactory--&gt;</span><br><span class="line">    &lt;bean id=<span class="string">"sqlSessionFactory"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span><br><span class="line">        &lt;!--引用配置好的数据源--&gt;</span><br><span class="line">        &lt;property name="dataSource" ref="dataSource"&gt;&lt;/property&gt;</span><br><span class="line">        &lt;!--加载mybatis的配置文件--&gt;</span><br><span class="line">        &lt;property name="configLocation" value="classpath:config.xml"&gt;&lt;/property&gt;</span><br><span class="line">        &lt;!-- 扫描sql配置文件:mapper需要的xml文件 --&gt;</span><br><span class="line">        &lt;property name="mapperLocations" value="com/itt/mapper/*.xml"&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>


</li>
</ul>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>-Spring -Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>生产者-消费者模式Java实现</title>
    <url>/2020/08/18/%E7%94%9F%E4%BA%A7%E8%80%85-%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%BC%8FJava%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<p>生产者-消费者是多线程协作中非常典型的例子！<br>主要是生产者负责生产产品，然后消费者进行消费，但是这样的模式有几个前提<br>①生产者在生产前必须判断消费者线程是否占用(这里用来了加锁机制来避免发生线程安全的问题，在某一时刻内只能有一个对象在占用线程)，如果线程为空闲，则才生产产品，生产完成之后，再”唤醒”消费者进行强制消费，这里有点意思啊！<br>②消费者在消费时，同样也要判断是否线程空闲，如果占用就一起”等待“，否则就消费产品，完成后就”唤醒“生产者进行生产产品！</p>
<a id="more"></a>

<p><img src="C:%5CUsers%5C%E5%8D%95%E5%B0%91%E5%AE%9D%E5%AE%9D%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1597762435037.png" alt="1597762435037"></p>
<blockquote>
<p>下面我们将上面的思路转换为代码实现一波：</p>
<p>首先我们要定义一个桌子类，类中应该包含产品的数量 ，锁对象，还有产品的是否可以食用的状态：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Desk</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个标记</span></span><br><span class="line">    <span class="comment">//true 表示桌子上有汉堡，可以吃,否则就不可以</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//汉堡包的总数量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//锁对象,只能是同一把锁</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Object lock = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后就再定义生产者，这里的类定义为了Cooker，也是为为见名知意，Cooker类是一个线程，应该extends 线程类，然后重写run方法，写上生产的业务代码，也就是线程任务：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cooker</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//继承Thread必须实现run方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">//加的是同一把锁</span></span><br><span class="line">            <span class="keyword">synchronized</span> (Desk.lock)&#123;</span><br><span class="line">                <span class="keyword">if</span> (Desk.count == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!Desk.flag) &#123;</span><br><span class="line">                        <span class="comment">//生产</span></span><br><span class="line">                        System.out.println(<span class="string">"生产者正在生产产品...."</span>);</span><br><span class="line">                        Desk.flag = <span class="keyword">true</span>;</span><br><span class="line">                        <span class="comment">//叫醒消费者</span></span><br><span class="line">                        Desk.lock.notifyAll();</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">//没有就等待</span></span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            Desk.lock.wait();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后就是消费者要进行消费了，线程任务和上面大致一样</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Foodie</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        	<span class="comment">//加锁</span></span><br><span class="line">            <span class="keyword">synchronized</span> (Desk.lock)&#123;</span><br><span class="line">                <span class="keyword">if</span> (Desk.count == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (Desk.flag) &#123;</span><br><span class="line">                        <span class="comment">//如果有</span></span><br><span class="line">                        System.out.println(<span class="string">"消费者正在消费...."</span>);</span><br><span class="line">                        Desk.flag = <span class="keyword">false</span>;</span><br><span class="line">                        <span class="comment">//唤醒生产者</span></span><br><span class="line">                        Desk.lock.notifyAll();</span><br><span class="line">                        Desk.count--;</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">//没有就等待</span></span><br><span class="line">                        <span class="comment">//使用什么对象当做锁，就必须用这个对象调用等待唤醒对象</span></span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            Desk.lock.wait();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后是主线程：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Foodie f = <span class="keyword">new</span> Foodie();</span><br><span class="line">        Cooker c = <span class="keyword">new</span> Cooker();</span><br><span class="line"></span><br><span class="line">        f.start();</span><br><span class="line">        c.start();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>最后运行代码，看一下结果：<br><img src="C:%5CUsers%5C%E5%8D%95%E5%B0%91%E5%AE%9D%E5%AE%9D%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1597762463529.png" alt="1597762463529"></p>
<blockquote>
<p>总结：</p>
</blockquote>
<p>生产者-消费者模式主要是要对于多线程的应用场景下，要保证它的调度满足一定的规律！如有错误，请指正！</p>
]]></content>
      <categories>
        <category>java设计模式</category>
      </categories>
      <tags>
        <tag>java设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>工厂模式</title>
    <url>/2020/04/17/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="工厂模式："><a href="#工厂模式：" class="headerlink" title="工厂模式："></a>工厂模式：</h1><a id="more"></a>

<ul>
<li><p>作用：</p>
<ul>
<li><p>实现了创建者和调用者的分离</p>
</li>
<li><p>详细分类：</p>
<ul>
<li><p>简单工厂模式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">name</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tesla</span> <span class="keyword">implements</span>  <span class="title">Car</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">name</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"特斯拉！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WuLing</span> <span class="keyword">implements</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">name</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"五菱宏光"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//静态工厂模式</span></span><br><span class="line"><span class="comment">//增加一个新的产品，如果不改变代码，做不到实现！</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CarFactory</span> </span>&#123;</span><br><span class="line">    <span class="comment">//方法一</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Car <span class="title">getCar</span><span class="params">(String car)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (car.equals(<span class="string">"五菱"</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> WuLing();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (car.equals(<span class="string">"特斯拉"</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Tesla();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//方法二</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Car <span class="title">getWuling</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> WuLing();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Car <span class="title">getTesla</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Tesla();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    Car car = CarFactory.getCar(<span class="string">"五菱"</span>);</span><br><span class="line">    Car car2 = CarFactory.getCar(<span class="string">"特斯拉"</span>);</span><br><span class="line"></span><br><span class="line">    car.name();</span><br><span class="line">    car2.name();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
</ul>
</li>
</ul>
</li>
</ul>
<pre><code>* 工厂方法模式

  ![1581256720707](C:\Users\单少宝宝\AppData\Roaming\Typora\typora-user-images\1581256720707.png)

  * 代码实现：

    <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">name</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

    <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//工厂方法模式</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CarFactory</span> </span>&#123;</span><br><span class="line">    <span class="function">Car <span class="title">getCar</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

    <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MoBai</span> <span class="keyword">implements</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">name</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"膜拜单车"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

    <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MoBaiFactory</span> <span class="keyword">implements</span> <span class="title">CarFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Car <span class="title">getCar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MoBai();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

    <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Car car2 = <span class="keyword">new</span> MoBaiFactory().getCar();</span><br><span class="line">        car2.name();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><ul>
<li><p>核心本质：</p>
<ul>
<li>实例化对象不使用new ,用工厂方法代替</li>
<li>将选择实现类，创建对象统一管理和控制。从而将调用者跟我们的实现类解耦。</li>
</ul>
</li>
</ul>
<h1 id="抽象工厂模式："><a href="#抽象工厂模式：" class="headerlink" title="抽象工厂模式："></a>抽象工厂模式：</h1><p>定义：抽象工厂模式提供了一个创建一系列相关或者相互依赖对象的接口，无需指定它们具体的类。</p>
]]></content>
  </entry>
  <entry>
    <title>多路查找树总结(2-3树、2-3-4树、B树、B+树、B树)</title>
    <url>/2020/08/08/%E5%A4%9A%E8%B7%AF%E6%9F%A5%E6%89%BE%E6%A0%91%E6%80%BB%E7%BB%93(2-3%E6%A0%91%E3%80%812-3-4%E6%A0%91%E3%80%81B%E6%A0%91%E3%80%81B+%E6%A0%91%E3%80%81B%E6%A0%91)/</url>
    <content><![CDATA[<h3 id="二叉树的问题分析："><a href="#二叉树的问题分析：" class="headerlink" title="二叉树的问题分析："></a>二叉树的问题分析：</h3><h5 id="二叉树的操作效率较高，但存在着很大的问题到底存在着什么问题呢？"><a href="#二叉树的操作效率较高，但存在着很大的问题到底存在着什么问题呢？" class="headerlink" title="二叉树的操作效率较高，但存在着很大的问题到底存在着什么问题呢？"></a>二叉树的操作效率较高，但存在着很大的问题到底存在着什么问题呢？</h5><a id="more"></a>



<p><img src="https://img-blog.csdnimg.cn/20200805205753875.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>存在的问题：</strong></p>
<ol>
<li>二叉树需要加载到内存时，如果二叉树的节点少，并不会出现什么问题，但是如果二叉树的节点很多，就会出现 很大的问题</li>
<li>问题一：在构建二叉树时，需要多次进行I/O操作(海量数据存在数据库或文件中)，节点海量，构造二叉树时，速度有影响。</li>
<li>问题二：节点海量，也会造成二叉树的高度很大，会降低操作速度</li>
</ol>
<p>==<strong>解决问题的方案为：多叉树</strong>==<br>1.在二叉树中，每个节点有数据项，最多有两个子节点，如果允许每个节点可以有更多的数据项和更多的子节点，就是多叉树(multiway tree)。</p>
<hr>
<h3 id="2-3树："><a href="#2-3树：" class="headerlink" title="==2-3树：=="></a>==<strong>2-3树：</strong>==</h3><h6 id="2-3树，2-3-4树都是属于多叉树，多叉树通过重新组织节点，减少树的高度，能对二叉树进行优化！"><a href="#2-3树，2-3-4树都是属于多叉树，多叉树通过重新组织节点，减少树的高度，能对二叉树进行优化！" class="headerlink" title="2-3树，2-3-4树都是属于多叉树，多叉树通过重新组织节点，减少树的高度，能对二叉树进行优化！"></a>2-3树，2-3-4树都是属于多叉树，多叉树通过重新组织节点，减少树的高度，能对二叉树进行优化！</h6><p><img src="https://img-blog.csdnimg.cn/20200805210303572.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h5 id="2-3树是最简单的B树，特点："><a href="#2-3树是最简单的B树，特点：" class="headerlink" title="2-3树是最简单的B树，特点："></a><strong>2-3树是最简单的B树，特点：</strong></h5><ol>
<li>2-3树的所有叶子节点都在同一层(只要是B树都满足这个条件)</li>
<li>有两个子节点的节点叫二节点，二节点要么没有子节点，要么有两个子节点。</li>
<li>有三个子节点的节点叫三节点，三节点要么没有子节点，要么有三个子节点。</li>
<li>2-3树是由二节点和三节点构成的树。</li>
</ol>
<h5 id="2-3树的插入规则："><a href="#2-3树的插入规则：" class="headerlink" title="2-3树的插入规则："></a><strong>2-3树的插入规则：</strong></h5><ol>
<li>2-3树的所有叶子节点都在同一层(只要是B树都满足这个条件)</li>
<li>有两个子节点的节点叫二节点，二节点要么没有子节点，要么有两个子节点。</li>
<li>有三个子节点的节点叫三节点，三节点要么没有子节点，要么有三个子节点。</li>
<li>当按照规则插入一个数到某个节点时，不能满足上面三个要求，就需要拆，先向上拆，如果上层满，则拆本层，拆后仍然需要满足上面3个条件。</li>
</ol>
<hr>
<h4 id="2-3-4树：-也是B树的一种"><a href="#2-3-4树：-也是B树的一种" class="headerlink" title="==2-3-4树：(也是B树的一种)=="></a>==<strong>2-3-4树：(也是B树的一种)</strong>==</h4><p><img src="https://img-blog.csdnimg.cn/20200805210617617.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>但是它与2-3树不同的是，它多了一个度为4的树！</p>
<hr>
<h3 id="重点："><a href="#重点：" class="headerlink" title="重点："></a>重点：</h3><h4 id="B树：-B-B-树-B-tree-–-gt-数据分散在叶子节点和非叶子节点上"><a href="#B树：-B-B-树-B-tree-–-gt-数据分散在叶子节点和非叶子节点上" class="headerlink" title="==B树：(B-,B-树,B-tree)–&gt;数据分散在叶子节点和非叶子节点上=="></a>==B树：(B-,B-树,B-tree)–&gt;数据分散在叶子节点和非叶子节点上==</h4><p>B-tree树即B树，B即Balanced，平衡。<br>Mysql中的索引是基于B+树， Mongodb使用的索引是B树<br><img src="https://img-blog.csdnimg.cn/20200805210745153.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>B树的说明 ：</strong><br>1). B树的阶：节点的最多子节点的个数，比如2-3树的阶是3，2-3-4树的阶是4<br>2). B-树的搜索，从根节点开始，对节点内的关键字(有序)序列进行二分查找，如果命中则结束，否则进入到查询关键字所属范围的儿子节点重担，直到所对应的儿子指针为空，或已经是叶子结点！<br>3). 关键字集合分布在整颗树中，即叶子节点和非叶子节点都存放数据。<br>4). 搜索有可能在非叶子节点结束<br>5). 其搜索性能等价于在关键字全集内做一次二分查找！</p>
<hr>
<h4 id="B-树：–-gt-所有的数据都存放在叶子节点上，可以很好的降低树的高度"><a href="#B-树：–-gt-所有的数据都存放在叶子节点上，可以很好的降低树的高度" class="headerlink" title="==B+树：–&gt;所有的数据都存放在叶子节点上，可以很好的降低树的高度=="></a>==B+树：–&gt;所有的数据都存放在叶子节点上，可以很好的降低树的高度==</h4><h6 id="B-树是B树的变体，也是一种多路搜索树！"><a href="#B-树是B树的变体，也是一种多路搜索树！" class="headerlink" title="B+树是B树的变体，也是一种多路搜索树！"></a>B+树是B树的变体，也是一种多路搜索树！</h6><h5 id="B-树的说明-："><a href="#B-树的说明-：" class="headerlink" title="B+树的说明 ："></a>B+树的说明 ：</h5><p>1). B+树的搜索与B树基本相同，区别是B+树只有达到叶子节点才命中(B树可以在非叶子结果命中)，其性能也等价于在关键字全集做一次二分查找。<br>2). 所有关键字都出现在叶子节点的链表中(数据只能在叶子节点【也叫稠密索引】,且链表中的关键字(数据)恰好是有序的)。<br>3). 不可能在非叶子节点命中。<br>4). 非叶子节点相当于是叶子节点的索引(稀疏索引)，叶子节点相当于是存储(关键字)数据的数据层。<br>5). 更适合文件索引系统。<br>6). B树和B+树各有自己的应用场景，不能说B+树完全比B树好，反之亦然</p>
<hr>
<h4 id="B-树："><a href="#B-树：" class="headerlink" title="==B*树：=="></a>==B*树：==</h4><h6 id="也是B-树的变体，在B-树的非根和非叶子再增加指向兄弟的指针。"><a href="#也是B-树的变体，在B-树的非根和非叶子再增加指向兄弟的指针。" class="headerlink" title="也是B+树的变体，在B+树的非根和非叶子再增加指向兄弟的指针。"></a>也是B+树的变体，在B+树的非根和非叶子再增加指向兄弟的指针。</h6><p><img src="https://img-blog.csdnimg.cn/20200805211245988.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h5 id="B-树的说明："><a href="#B-树的说明：" class="headerlink" title="B*树的说明："></a>B*树的说明：</h5><p>1).B<em>树定义了非叶子节点关键字个数至少为(2/3)</em>M，即块的最低使用率为2/3，而B+树的块的最低使用率为B+树的1/2.(其中M为它的度)<br>2).从第1个特点我们可以看出，B*树分配新节点的概率比B+树要低，空间使用率更高！</p>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>枚举类你真的会吗？</title>
    <url>/2020/01/10/%E6%9E%9A%E4%B8%BE%E7%B1%BB%E4%BD%A0%E7%9C%9F%E7%9A%84%E4%BC%9A%E5%90%97%EF%BC%9F/</url>
    <content><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200623000913929.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<a id="more"></a>

<blockquote>
<p>在java5增加了一个enum关键字，用来定义枚举类，相信好多的小伙伴学习java很久了，但是对于枚举类是空白的，只知道有这么个东西，奶奶不疼舅舅不爱的，对于使用更是没有应用过，相信下面的demo你一定会对枚举产生很大的兴趣，这个兄弟可以灰常的方便以及实现的！</p>
</blockquote>
<h2 id="使用枚举类会默认使用finala修改，枚举类不能派生子类。"><a href="#使用枚举类会默认使用finala修改，枚举类不能派生子类。" class="headerlink" title="使用枚举类会默认使用finala修改，枚举类不能派生子类。"></a>使用枚举类会默认使用finala修改，枚举类不能派生子类。</h2><ul>
<li>代码时间<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> SeasonEnum&#123;</span><br><span class="line">    <span class="comment">//定义四个实例,春，夏，秋，冬</span></span><br><span class="line">    SPRING,SUMMER,FALL,WINTER;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JudgeTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">judge</span><span class="params">(SeasonEnum s)</span></span>&#123;</span><br><span class="line">        <span class="comment">//swith语句里的表达式可以为枚举值</span></span><br><span class="line">        <span class="keyword">switch</span> (s)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> SPRING:</span><br><span class="line">                System.out.println(<span class="string">"春天到了，又到了动物交配的季节！"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> SUMMER:</span><br><span class="line">                System.out.println(<span class="string">"夏天，小青蛙呱呱叫"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> FALL:</span><br><span class="line">                System.out.println(<span class="string">"秋天，是个分手的好季节"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> WINTER:</span><br><span class="line">                System.out.println(<span class="string">"老婆孩子热炕头ing"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EnumTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//打印枚举类型中的所有实例</span></span><br><span class="line">        <span class="keyword">for</span> (SeasonEnum s : SeasonEnum.values()) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="comment">//传入指定的实例，输出方法中符合条件的结果</span></span><br><span class="line">        <span class="keyword">new</span> JudgeTest().judge(SeasonEnum.SPRING);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>运行结果</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/2020040917425089.png" alt="在这里插入图片描述"><br>在java中对象之间判断是否相等常用的是equalse，在枚举中使用的是“==”</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EnumTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">        SeasonEnum spring = SeasonEnum.SPRING;</span><br><span class="line">        <span class="keyword">if</span> (spring == SeasonEnum.WINTER)&#123;</span><br><span class="line">            System.out.println(<span class="string">"输入的值存在"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"值不存在！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="java-lang-Enum类中的其他方法："><a href="#java-lang-Enum类中的其他方法：" class="headerlink" title="java.lang.Enum类中的其他方法："></a>java.lang.Enum类中的其他方法：</h2><p> <strong>（1）int compareTo(E o):</strong><br> 用于与指定枚举对象比较顺序，同一个枚举实例只能与相同类型的枚举实例进行比较。如果该枚举对象位于指定枚举对象之后，则返回正整数，如果位置指定枚举对象之前，则返回负整数，否则返回零。<br> <strong>（2）String name()：</strong><br> 返回此枚举实例的名称，这个名称就是定义枚举类时列出的所有枚举值之一，不过大多数情况下使用的toString方法，此方法返回的结果更加友好。<br> <strong>（3）int ordinal()：</strong><br> 返回枚举值在枚举类中的索引值（就是枚举值在枚举声明 中的位置，枚举值 的索引 从0开始）。</p>
<h2 id="枚举类的成员变量、方法和构造器"><a href="#枚举类的成员变量、方法和构造器" class="headerlink" title="枚举类的成员变量、方法和构造器"></a>枚举类的成员变量、方法和构造器</h2><ul>
<li>代码<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenderTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    	<span class="comment">//通过Enum中的valueOf方法来获取指定枚举类的枚举值</span></span><br><span class="line">        Gender g = Enum.valueOf(Gender.class, "FEMALE");</span><br><span class="line">        <span class="comment">//设置值</span></span><br><span class="line">        g.name=<span class="string">"女"</span>;</span><br><span class="line">        System.out.println(g+<span class="string">"代表："</span>+g.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> Gender&#123;</span><br><span class="line">    MALE,FEMALE;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
在这样的情况下，是正常的，如果将g.name=”男”设置为男，那么整个逻辑就特别的混乱，我们可不可以直接 将枚举中的值 给它指定好，使用者不能改变，那我们来试试<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Gender &#123;</span><br><span class="line">    MALE,FEMALE;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (<span class="keyword">this</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> MALE:</span><br><span class="line">                <span class="keyword">if</span> (name.equals(<span class="string">"男"</span>)) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.name = name;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    System.out.println(<span class="string">"参数错误"</span>);</span><br><span class="line">                    <span class="keyword">return</span> ;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> FEMALE:</span><br><span class="line">                <span class="keyword">if</span> (name.equals(<span class="string">"女"</span>)) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.name = name;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    System.out.println(<span class="string">"参数错误"</span>);</span><br><span class="line">                    <span class="keyword">return</span> ;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenderTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Gender g = Gender.valueOf(<span class="string">"FEMALE"</span>);</span><br><span class="line">        g.setName(<span class="string">"女"</span>);</span><br><span class="line">        System.out.println(g+<span class="string">"代表："</span>+g.getName());</span><br><span class="line">        g.setName(<span class="string">"男"</span>);</span><br><span class="line">        System.out.println(g+<span class="string">"代表："</span>+g.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>运行结果<br><img src="https://img-blog.csdnimg.cn/20200409220332213.png" alt="在这里插入图片描述"><br>第一次运行正确，但是我们如果设置姓名为男时，还是不行，因为第第一次初始化时已经设置为女再设置就会报错。那么这种方式还是得修改：</li>
</ul>
</li>
</ul>
<hr>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Gender &#123;</span><br><span class="line"></span><br><span class="line">    MALE(<span class="string">"男"</span>),FEMALE(<span class="string">"女"</span>);</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Gender</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenderTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Gender g = Gender.valueOf(<span class="string">"FEMALE"</span>);</span><br><span class="line">        System.out.println(g.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>结果<br><img src="https://img-blog.csdnimg.cn/20200409221232254.png" alt="在这里插入图片描述"></li>
</ul>
<h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h2><h4 id="在给枚举类中的值MALE-“男”-FEMALE-“女”-进行初始化时，一定要有有参构造方法，才能给值赋值，并且构造方法只能使用private来修饰，这样我们就可以实现不修改代码，并且值-是不会改变的！"><a href="#在给枚举类中的值MALE-“男”-FEMALE-“女”-进行初始化时，一定要有有参构造方法，才能给值赋值，并且构造方法只能使用private来修饰，这样我们就可以实现不修改代码，并且值-是不会改变的！" class="headerlink" title="在给枚举类中的值MALE(“男”),FEMALE(“女”);进行初始化时，一定要有有参构造方法，才能给值赋值，并且构造方法只能使用private来修饰，这样我们就可以实现不修改代码，并且值 是不会改变的！"></a>在给枚举类中的值MALE(“男”),FEMALE(“女”);进行初始化时，一定要有有参构造方法，才能给值赋值，并且构造方法只能使用private来修饰，这样我们就可以实现不修改代码，并且值 是不会改变的！</h4><h2 id="总结：在枚举类型中，非抽象的枚举类才默认使用final修改！"><a href="#总结：在枚举类型中，非抽象的枚举类才默认使用final修改！" class="headerlink" title="总结：在枚举类型中，非抽象的枚举类才默认使用final修改！"></a>总结：在枚举类型中，非抽象的枚举类才默认使用final修改！</h2>]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>版本控制工具Git的基础命令及在IDEA中的操作</title>
    <url>/2020/07/26/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%B7%A5%E5%85%B7Git%E7%9A%84%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4%E5%8F%8A%E5%9C%A8IDEA%E4%B8%AD%E7%9A%84%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<blockquote>
<p>Git是一个版本控制工具对于版本控制和协同开发有很好的支持，并且很好的支持分支，这就可以很了的解决了在开发时只能主线开发，进度会受到很大的影响，所以git是当前最流行的版本控制工具！我总结一下git的常用命令以及Git本地仓库的基本流程和在IDEA中如何操作git进行代码提交，branch，clone等等，由于本人是个小白，所以如有问题，请各位不吝赐教！</p>
</blockquote>
<a id="more"></a>

<h2 id="首先是Git的安装"><a href="#首先是Git的安装" class="headerlink" title="首先是Git的安装"></a>首先是Git的安装</h2><h3 id="1-到Git的官网：https-git-scm-com-downloads"><a href="#1-到Git的官网：https-git-scm-com-downloads" class="headerlink" title="1.到Git的官网：https://git-scm.com/downloads"></a>1.到Git的官网：<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">https://git-scm.com/downloads</a></h3><h3 id="2-进入下载的界面"><a href="#2-进入下载的界面" class="headerlink" title="2.进入下载的界面"></a>2.进入下载的界面</h3><p><img src="https://img-blog.csdnimg.cn/20200726082756296.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">3.安装也是一路next这里就不再详细的说明了！</p>
<hr>
<h2 id="Git本地仓库的基本工作流程"><a href="#Git本地仓库的基本工作流程" class="headerlink" title="Git本地仓库的基本工作流程"></a>Git本地仓库的基本工作流程</h2><p><img src="https://img-blog.csdnimg.cn/20200726083248891.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="内存区的主要介绍："><a href="#内存区的主要介绍：" class="headerlink" title="内存区的主要介绍："></a>内存区的主要介绍：</h3><figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">工作目录<span class="comment">(Working Tree)</span>：</span><br><span class="line">代码的存放位置，代码经常发生变动</span><br><span class="line">暂存区<span class="comment">(Index)</span>：</span><br><span class="line">把程序员写好的代码文件添加到暂存区，添加到暂存区的内容未来可以一次性的提交到版本库</span><br><span class="line">本地历史仓库<span class="comment">(Repository)</span>：</span><br><span class="line">存放的就是不同版本的代码</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="Git的常用命令"><a href="#Git的常用命令" class="headerlink" title="Git的常用命令"></a>Git的常用命令</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">**基本命令**</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span></span><br><span class="line">初始化，创建git仓库</span><br><span class="line"><span class="code">	git init </span></span><br><span class="line">查看git状态，看文件是否进行了添加，提交，操作</span><br><span class="line"><span class="code">	git status</span></span><br><span class="line">把工作目录中的文件添加到暂存区</span><br><span class="line"><span class="code">	git add 文件名</span></span><br><span class="line">提交，将暂存区中的文件提交到本地仓库</span><br><span class="line"><span class="code">	git commit</span></span><br><span class="line">查看操作的日志</span><br><span class="line"><span class="code">	git log</span></span><br><span class="line">查看所有操作记录(包含删除)这个日志是一个缩略显示</span><br><span class="line"><span class="code">	git reflog</span></span><br><span class="line">版本切换</span><br><span class="line"><span class="code">	git reset --hard 版本号</span></span><br><span class="line"><span class="code">	git reset --hard HEAR^ 回退到上一个版本</span></span><br><span class="line"><span class="code">	这里我要说明的是，在进行回退到上一个版本操作时，一定要确认自己在哪个 版本上，如果在第1版，那它就没有上一个版本！如果不确定自己在哪个版本中，可以使用git reflog看master指向的是谁，那当前 就在哪个版本上！</span></span><br><span class="line"><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">**分支命令**</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span></span><br><span class="line">创建分支：</span><br><span class="line"><span class="code">	git branch 分支名</span></span><br><span class="line">切换分支：</span><br><span class="line"><span class="code">	git checkout 分支名</span></span><br><span class="line">查看所有分支：</span><br><span class="line"><span class="code">	git branch</span></span><br><span class="line">查看当前分支：</span><br><span class="line"><span class="code">	git status</span></span><br><span class="line">查看当前分支下的文件：</span><br><span class="line"><span class="code">	ls</span></span><br><span class="line">合并分支：</span><br><span class="line"><span class="code">	git merge 分支名</span></span><br><span class="line">删除分支：</span><br><span class="line"><span class="code">	git branch -D 分支名</span></span><br><span class="line"><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">**远程仓库操作**</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span></span><br><span class="line">克隆远程仓库到本地</span><br><span class="line"><span class="code">	git clone 仓库地址</span></span><br><span class="line">远程仓库发生变化时，本地仓库同步(拉取更新的部分)</span><br><span class="line"><span class="code">	git pull 远程仓库名 分支名</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="Git远程仓库的工作流程"><a href="#Git远程仓库的工作流程" class="headerlink" title="Git远程仓库的工作流程"></a>Git远程仓库的工作流程</h2><p><img src="https://img-blog.csdnimg.cn/20200726224501878.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<hr>
<h2 id="IDEA中Git的基本操作"><a href="#IDEA中Git的基本操作" class="headerlink" title="IDEA中Git的基本操作"></a>IDEA中Git的基本操作</h2><h3 id="1-首先新建一个java项目"><a href="#1-首先新建一个java项目" class="headerlink" title="1.首先新建一个java项目"></a>1.首先新建一个java项目</h3><p><img src="https://img-blog.csdnimg.cn/2020072623022856.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200726230301483.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200726230337588.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="如图所示，新建包和类，然后打印helloword"><a href="#如图所示，新建包和类，然后打印helloword" class="headerlink" title="如图所示，新建包和类，然后打印helloword"></a>如图所示，新建包和类，然后打印helloword</h3><p><img src="https://img-blog.csdnimg.cn/20200726230453435.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="注意，下面我们要把一个项目上传到远程仓库："><a href="#注意，下面我们要把一个项目上传到远程仓库：" class="headerlink" title="注意，下面我们要把一个项目上传到远程仓库："></a>注意，下面我们要把一个项目上传到远程仓库：</h3><h4 id="1-先配置Git"><a href="#1-先配置Git" class="headerlink" title="1.先配置Git"></a>1.先配置Git</h4><p><img src="https://img-blog.csdnimg.cn/20200726230619192.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200726230749125.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h4 id="2-然后创建一个本地仓库"><a href="#2-然后创建一个本地仓库" class="headerlink" title="2.然后创建一个本地仓库"></a>2.然后创建一个本地仓库</h4><p><img src="https://img-blog.csdnimg.cn/20200726230852187.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">)<img src="https://img-blog.csdnimg.cn/20200726231036378.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h4 id="3-执行上面的操作后，可以看到代码发生了变化，变成红色了"><a href="#3-执行上面的操作后，可以看到代码发生了变化，变成红色了" class="headerlink" title="3.执行上面的操作后，可以看到代码发生了变化，变成红色了"></a>3.执行上面的操作后，可以看到代码发生了变化，变成红色了</h4><p><img src="https://img-blog.csdnimg.cn/20200726231118883.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h4 id="现在就可以commit到本地仓库了"><a href="#现在就可以commit到本地仓库了" class="headerlink" title="现在就可以commit到本地仓库了"></a>现在就可以commit到本地仓库了</h4><p><img src="https://img-blog.csdnimg.cn/20200726231215330.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2020072623140851.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h4 id="提交到本地仓库后代码就会变成绿色了"><a href="#提交到本地仓库后代码就会变成绿色了" class="headerlink" title="提交到本地仓库后代码就会变成绿色了"></a>提交到本地仓库后代码就会变成绿色了</h4><p><img src="https://img-blog.csdnimg.cn/20200726231452731.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h4 id="然后就可以Push到远程仓库中了"><a href="#然后就可以Push到远程仓库中了" class="headerlink" title="然后就可以Push到远程仓库中了"></a>然后就可以Push到远程仓库中了</h4><p><img src="https://img-blog.csdnimg.cn/20200726231534628.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h4 id="这个push时前提是必须有远程仓库，我们这里使用的是Gitee，然后在gitee上新建一个仓库"><a href="#这个push时前提是必须有远程仓库，我们这里使用的是Gitee，然后在gitee上新建一个仓库" class="headerlink" title="这个push时前提是必须有远程仓库，我们这里使用的是Gitee，然后在gitee上新建一个仓库"></a>这个push时前提是必须有远程仓库，我们这里使用的是Gitee，然后在gitee上新建一个仓库</h4><p><img src="https://img-blog.csdnimg.cn/20200726231707523.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/20200726231832833.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200726232225412.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h4 id="复制SSH的URL："><a href="#复制SSH的URL：" class="headerlink" title="复制SSH的URL："></a>复制SSH的URL：</h4><p><img src="https://img-blog.csdnimg.cn/20200726232113848.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/20200726232504749.png" alt="在这里插入图片描述"></p>
<h4 id="这样就成功了！接下来我们来看一下远程仓库有没有上传上去"><a href="#这样就成功了！接下来我们来看一下远程仓库有没有上传上去" class="headerlink" title="这样就成功了！接下来我们来看一下远程仓库有没有上传上去"></a>这样就成功了！接下来我们来看一下远程仓库有没有上传上去</h4><p><img src="https://img-blog.csdnimg.cn/20200726232553432.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg5MzA4NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h4 id="这下代码就上传到远程仓库了！"><a href="#这下代码就上传到远程仓库了！" class="headerlink" title="这下代码就上传到远程仓库了！"></a>这下代码就上传到远程仓库了！</h4>]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
</search>
